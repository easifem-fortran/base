!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   StiffnessMatrix_6.part
!                   Last Update :   October-26-2018
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    StiffnessMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getStiffnessMatrix_6
!------------------------------------------------------------------------------

SUBROUTINE getStiffnessMatrix_6( Obj, Lambda, Mu )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  ! 1. This subroutine returns the stiffness matrix for given Lambda and Mu
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  ! Define intent of dummy variables
#ifdef SpaceMat
  CLASS( SpaceMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( StiffnessMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif  
  REAL( DFP ), INTENT( IN ) :: Lambda, Mu

  ! Define internal variables
  REAL( DFP ) :: Real1, Real2, Real3
  REAL( DFP ), ALLOCATABLE :: Ke11( :, : )

  INTEGER( I4B ) :: c1, c2, r1, r2, NNS, NSD, NIPS, IPS, i, j
  TYPE( ShapeData_ ), POINTER :: SD

  NIPS = SIZE(Obj%SD); NNS = .NNS. Obj%SD( 1 ); NSD = .NSD. Obj%SD(1)
  IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  ALLOCATE( Obj % Mat2( NNS * NSD, NNS * NSD ) )
  Obj % Mat2 = 0.0_DFP

  DO IPS = 1, NIPS
    SD => Obj % SD( IPS )
    Real1 = mu * SD % Js_Xi2Xt * SD % Ws
    Real2 = ( lambda + mu ) * SD % Js_Xi2Xt * SD % Ws
    Real3 = lambda * SD % Js_Xi2Xt * SD % Ws

    c1 = 0; c2 = 0;
    DO j = 1, NSD
      c1 = c2 + 1; c2 = j*NNS; r1 = 0; r2 = 0
      DO i = 1, NSD
        r1 = r2 + 1; r2 = i * NNS
        IF( i .EQ. j ) THEN
          Ke11 = Real1 * MATMUL( SD % dNdXt, TRANSPOSE( SD % dNdXt ) ) &
            &	+ Real2 * OUTERPROD( SD % dNdXt( :, i ), SD % dNdXt( :, i ) )
        ELSE                            
          Ke11 = Real3 * OUTERPROD( SD % dNdXt( :, i ), SD % dNdXt( :, j ) ) &
            + Real1 * OUTERPROD( SD % dNdXt( :, j ), SD % dNdXt( :, i ) )
        END IF
        Obj % Mat2( r1:r2, c1:c2 ) = Obj % Mat2( r1:r2, c1:c2 ) + Ke11
      END DO
    END DO

  END DO

  SD => NULL()
  DEALLOCATE( Ke11 )

END SUBROUTINE getStiffnessMatrix_6

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------
