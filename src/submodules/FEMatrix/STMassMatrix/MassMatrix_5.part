!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   MassMatrix_5.part
!                   Last Update :   Nov-16-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STMassMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                              getMassMatrix_5
!------------------------------------------------------------------------------

SUBROUTINE getMassMatrix_5( Obj, rho, Term1, Term2, rhoType )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !       1.  Returns mass matrix; rho is a 2D array of STNodal Values
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STMassMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif

  REAL( DFP ), INTENT( IN ) :: rho( :, : )
  INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
  CHARACTER( LEN = * ), INTENT( IN ) :: RhoType

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, b
  REAL( DFP ) :: RealVal1, RealVal, RhoBar
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : )
  CLASS( STShapeData_ ), POINTER :: SD
  LOGICAL( LGT ) :: Rho_Nodal

  Rho_Nodal = .TRUE.

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg("STMassMatrix_Class.f90", &
          "getMassMatrix_5(), Flag-1", &
          "STMassMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T )
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 ) 

  SELECT CASE( TRIM( RhoType ) )

#ifdef DEBUG_VER
  CASE( "Nodal", "NodalValues", "Nodal Values", "SpaceNodalValues", &
       "Space Nodal Values" )

     Rho_Nodal = .TRUE.
#endif
  CASE( "Integration", "Integration Points", &
       "IntegrationPoints", "Quad Points", "QuadPoints", "Quad" )

     Rho_Nodal = .FALSE.

#ifdef DEBUG_VER
  CASE DEFAULT

     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_5(Obj, rho, Term1, Term2, rhoType)", &
          "No Case found for given RhoType, It should be &
          & Nodal, NodalValues, Nodal Values, SpaceNodalValues, &
          & Integration, Integration Points, IntegrationPoints, &
          & QuadPoints, Quad Points" )
     Error_Flag = .TRUE.
     RETURN
#endif
  END SELECT

  IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
  ALLOCATE( Obj % Mat4( NNS, NNS, NNT, NNT ) )
  Obj % Mat4 = 0.0_DFP

  SELECT CASE( Term1 ) 

  CASE( 1 )

     SELECT CASE( Term2 )

        !( 1, 1 )
     CASE( 1 )

        DO IPT = 1, NIPT 

           DO IPS = 1, NIPS

              SD => Obj % SD( IPS, IPT )

              IF( Rho_Nodal ) THEN
                 CALL SD % getInterpolationOfScalar( RhoBar, rho )
#ifdef DEBUG_VER
                 CALL Check_Error("STMassMatrix_Class.f90 >> getMassMatrix_5()", &
                      "CALL SD % getInterpolationOfScalar( RhoBar, rho )" )
#endif
              ELSE

                 RhoBar = rho( IPS, IPT )

              END IF

              RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness * RhoBar

              DO b = 1, NNT

                 DO a = 1, NNT 

                    Obj % Mat4( :, :, a, b ) = Obj % Mat4( :, :, a, b ) + &
                         OUTERPROD( a = SD % dNTdt( :, a ), b = SD % dNTdt( :, b ) ) * RealVal

                 END DO

              END DO

           END DO

        END DO

        !( 1, 0 )
     CASE( 0 )

        DO IPT = 1, NIPT

           DO IPS = 1, NIPS

              SD => Obj % SD( IPS, IPT )

              IF( Rho_Nodal ) THEN

                 CALL SD % getInterpolationOfScalar( RhoBar, rho )
#ifdef DEBUG_VER
                 CALL Check_Error("STMassMatrix_Class.f90 >> getMassMatrix_5()", &
                      "CALL SD % getInterpolationOfScalar( RhoBar, rho )" )
#endif
              ELSE

                 RhoBar = rho( IPS, IPT )

              END IF

              RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness * RhoBar

              DO a = 1, NNT

                 Mat2 = OUTERPROD( a = SD % dNTdt( :, a ), b = SD % N )

                 DO b = 1, NNT

                    RealVal = SD % T( b ) * RealVal1

                    Obj % Mat4( :, :, a, b ) = Obj % Mat4( :, :, a, b ) &
                         + Mat2 * RealVal

                 END DO

              END DO

           END DO

        END DO
#ifdef DEBUG_VER
     CASE DEFAULT
        CALL Err_Msg( &
             "STMassMatrix_Class.f90", &
             "getMassMatrix_5(), Flag-1", &
             "Unknown value of Term2; It should be 1 or 0" )
        Error_Flag = .TRUE.
        RETURN
#endif
     END SELECT

  CASE( 0 )

     SELECT CASE( Term2 )
        !( 0, 1 )
     CASE( 1 )

        DO IPT = 1, NIPT

           DO IPS = 1, NIPS

              SD => Obj % SD( IPS, IPT )

              IF( Rho_Nodal ) THEN

                 CALL SD % getInterpolationOfScalar( RhoBar, rho )
#ifdef DEBUG_VER
                 CALL Check_Error("STMassMatrix_Class.f90 >> getMassMatrix_5()", &
                      "CALL SD % getInterpolationOfScalar( RhoBar, rho )" )
#endif
              ELSE

                 RhoBar = rho( IPS, IPT )

              END IF

              RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness * RhoBar

              DO b = 1, NNT

                 Mat2 = OUTERPROD( a = SD % N, b = SD % dNTdt( :, b ) )

                 DO a = 1, NNT

                    RealVal = SD % T( a ) * RealVal1
                    Obj % Mat4( :, :, a, b ) = Obj % Mat4( :, :, a, b ) &
                         + Mat2 * RealVal

                 END DO

              END DO

           END DO

        END DO

        !( 0, 0 )
     CASE( 0 )

        DO IPT = 1, NIPT

           DO IPS = 1, NIPS

              SD => Obj % SD( IPS, IPT )

              IF( Rho_Nodal ) THEN

                 CALL SD % getInterpolationOfScalar( RhoBar, rho )
#ifdef DEBUG_VER
                 CALL Check_Error("STMassMatrix_Class.f90 >> getMassMatrix_5()", &
                      "CALL SD % getInterpolationOfScalar( RhoBar, rho )" )
#endif
              ELSE

                 RhoBar = rho( IPS, IPT )

              END IF

              RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness * RhoBar

              Mat2 = OUTERPROD( a = SD % N, b = SD % N )

              DO b = 1, NNT

                 DO a = 1, NNT

                    RealVal = SD % T( a ) * SD % T( b ) * RealVal1
                    Obj % Mat4( :, :, a, b ) = Obj % Mat4( :, :, a, b ) &
                         + Mat2 * RealVal

                 END DO

              END DO

           END DO

        END DO
#ifdef DEBUG_VER
     CASE DEFAULT

        CALL Err_Msg( &
             "STMassMatrix_Class.f90", &
             "getMassMatrix_5(), Flag-1", &
             "Unknown value of Term2; It should be 1 or 0" )
        Error_Flag = .TRUE.
        RETURN
#endif
     END SELECT

#ifdef DEBUG_VER
  CASE DEFAULT

     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_5(), Flag-1", &
          "Unknown value of Term1; It should be 1 or 0" )
     Error_Flag = .TRUE.
     RETURN
#endif

  END SELECT

  CALL Obj % Mat2FromMat4( )
  NULLIFY( SD )
  !IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  IF( ALLOCATED( Mat2 ) ) DEALLOCATE( Mat2 )

END SUBROUTINE getMassMatrix_5

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------
!

