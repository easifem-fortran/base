
!------------------------------------------------------------------------------
!                                                             getMassMatrix_14
!------------------------------------------------------------------------------

SUBROUTINE getMassMatrix_14( Obj, rho1, rho2, rho3 )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1.  Returns mass matrix; rho1, and rho2 are scalar
  !   2.  rho1 will be used for x-direction, rho2 will be used for y-direction    
  !   3.  for x components rho1 * NI * Ta * NJ * Tb
  !   4.  For y components rho2 * NI * Ta * NJ * Tb
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  !  Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STMassMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif

  REAL( DFP ), INTENT( IN ) :: rho1, rho2, rho3

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, b
  REAL( DFP ) :: RealVal, RealVal1, RealVal2
  CLASS( STShapeData_ ), POINTER :: SD
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : )

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg("STMassMatrix_Class.f90", &
          "getMassMatrix_14(), Flag-1", &
          "STMassMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T )
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 ) 

  IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
  ALLOCATE( Obj % Mat4( NNS*3, NNS*3, NNT, NNT ) )
  Obj % Mat4 = 0.0_DFP

  DO IPT = 1, NIPT

     DO IPS = 1, NIPS

        SD => Obj % SD( IPS, IPT )
        RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
             & * SD % Jt * SD % Thickness
        Mat2 = OUTERPROD( a = SD % N, b = SD % N )

        DO b = 1, NNT
           RealVal2 = RealVal1 * SD % T( b )
           DO a = 1, NNT
              RealVal = SD % T( a ) * RealVal2    
              Obj % Mat4( 1:NNS, 1:NNS, a, b ) = &
                   & Obj % Mat4( 1:NNS, 1:NNS, a, b ) + &
                   & Mat2 * RealVal * Rho1

              Obj % Mat4( NNS + 1 : 2*NNS, NNS + 1 : 2 * NNS, a, b ) = &
                   & Obj % Mat4( NNS + 1 : 2 * NNS, NNS + 1 : 2 * NNS, a, b ) + &
                   & Mat2 * RealVal * Rho2

              Obj % Mat4( 2*NNS + 1 : 3*NNS, 2*NNS + 1 : 3 * NNS, a, b ) = &
                   & Obj % Mat4( 2*NNS + 1 : 3 * NNS, 2*NNS + 1 : 3 * NNS, a, b ) + &
                   & Mat2 * RealVal * Rho3
           END DO
        END DO
     END DO
  END DO

  CALL Obj % Mat2FromMat4( )
  NULLIFY( SD )
  ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  IF( ALLOCATED( Mat2 ) ) DEALLOCATE( Mat2 )

END SUBROUTINE getMassMatrix_14
