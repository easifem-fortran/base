!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_5.part
!                   Last Update :   Nov-19-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    ConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_5
!------------------------------------------------------------------------------

SUBROUTINE getConvectiveMatrix_5( Obj, C, Term1, Term2, CType )

  !.    .    .    .    .    .    .    .    .    .    .    .    .    .    .    .
  !       1.  -   Returns mass matrix; C is a 2D array of Space Nodal Values
  !               The first index is for spatial component and second index is 
  !               is for spatial nodal values.
  !.    .    .    .    .    .    .    .    .    .    .    .    .    .    .    .

    ! Define intent of dummy variables
#ifdef SpaceMat
    CLASS( SpaceMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( ConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
  REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: C
  INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
  CHARACTER( LEN = * ), INTENT( IN ) :: CType

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NIPS, IPS
  REAL( DFP ), ALLOCATABLE :: cdNdXt( : )
  REAL( DFP ) :: RealVal
  LOGICAL( LGT ) :: isCNodal

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg( "ConvectiveMatrix_Class.f90", &
          & "getConvectiveMatrix_1(), Flag-1", &
          & "ConvectiveMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  isCNodal = .TRUE.
  SELECT CASE( TRIM( CType ) )
  CASE( "Quad", "QuadPoints", "Quad Points", &
       & "Integration", "Integration Points", &
       & "IntegrationPoints" )
     isCNodal = .FALSE.
  END SELECT

  NNS = Obj % SD( 1 ) % getNNS( )
  NIPS = Obj % getNIPS( )
  IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  ALLOCATE( Obj % Mat2( NNS, NNS ) )
  Obj % Mat2 = 0.0_DFP

  DO IPS = 1, NIPS

     IF( isCNodal ) THEN
        CALL Obj % SD( IPS ) % &
             & getProjectionOfdNdXt( SpaceNodalValues = C, &
             & cdNdXt = cdNdXt )
     ELSE
        CALL Obj % SD( IPS ) % &
             & getProjectionOfdNdXt( VectorValues = C( :, IPS ), &
             & cdNdXt = cdNdXt )
     END IF

     RealVal = Obj % SD( IPS ) % Ws &
          & * Obj % SD( IPS ) % Js_Xi2Xt &
          & * Obj % SD( IPS ) % Thickness

     IF( Term1 .EQ. 1 ) THEN
        Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + &
             & OUTERPROD( a = cdNdXt, b = Obj % SD( IPS ) % N ) * RealVal
     ELSE
        Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + &
             & OUTERPROD( a = Obj % SD( IPS ) % N, b = cdNdXt ) * RealVal
     END IF

  END DO

  DEALLOCATE( cdNdXt )

END SUBROUTINE getConvectiveMatrix_5

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

