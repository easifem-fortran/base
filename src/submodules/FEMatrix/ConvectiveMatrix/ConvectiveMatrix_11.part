!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_11.part
!                   Last Update :   Nov-20-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    ConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_11
!------------------------------------------------------------------------------

SUBROUTINE getConvectiveMatrix_11( Obj, A, A0, Term1, Term2, XType, MultiVar )

  !.    .    .    .    .    .    .    .    .    .    .    .    .    .    .    .
  !       1.  -   Returns mass matrix; C is a 2D array of Space Nodal Values
  !               The first index is for spatial component and second index is 
  !               is for spatial nodal values.
  !.    .    .    .    .    .    .    .    .    .    .    .    .    .    .    .

    ! Define intent of dummy variables
#ifdef SpaceMat
    CLASS( SpaceMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( ConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
  REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: A, A0
  INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
  CHARACTER( LEN = * ), INTENT( IN ) :: XType
  LOGICAL( LGT ), INTENT( IN ) :: MultiVar

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NIPS, IPS, NSD, i, j, M
  INTEGER( I4B ), ALLOCATABLE :: RC( :, : ), Indx
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : ), Aij( :, : )
  REAL( DFP ) :: RealVal

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11(), Flag-1", &
          "ConvectiveMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = Obj % SD( 1 ) % getNNS( )
  NSD = Obj % SD( 1 ) % getNSD( )
  NIPS = Obj % getNIPS( )
  M = SIZE( A, 1 )

#ifdef DEBUG_VER
  IF( SIZE( A, 3 ) .NE. NIPS ) THEN 
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11()", &
          "SIZE( A, 3 ) should be equal to the NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( A0, 3 ) .NE. NIPS ) THEN 
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11()", &
          "SIZE( A0, 3 ) should be equal to the NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( A, 1 ) .NE. SIZE( A, 2 ) ) THEN 
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11()", &
          "SIZE( A, 1 ) should be equal to SIZE( A, 2 )" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( A0, 1 ) .NE. SIZE( A0, 2 ) ) THEN 
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11()", &
          "SIZE( A0, 1 ) should be equal to SIZE( A0, 2 )" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  SELECT CASE( TRIM( ADJUSTL( XType ) ) ) 
  CASE( "dx", "dX", "dx1", "dX1", "x", "X", "x1", "X1" )
     IF( NSD .LT. 1 ) THEN 
        CALL Err_Msg("ConvectiveMatrix_Class.f90", &
             "getConvectiveMatrix_11()", &
             "XType is dx, therefore, NSD cannot be less than 1" )
        Error_Flag = .TRUE. 
        RETURN
     END IF
  CASE( "dy", "dY", "dx2", "dX2", "y", "Y", "x2", "X2" )
     IF( NSD .LT. 2 ) THEN 
        CALL Err_Msg("ConvectiveMatrix_Class.f90", &
             "getConvectiveMatrix_11()", &
             "XType is dx, therefore, NSD cannot be less than 2" )
        Error_Flag = .TRUE. 
        RETURN
     END IF
  CASE( "dz", "dZ", "dx3", "dX3", "z", "Z", "x3", "X3" )
     IF( NSD .LT. 3 ) THEN 
        CALL Err_Msg("ConvectiveMatrix_Class.f90", &
             "getConvectiveMatrix_11()", &
             "XType is dx, therefore, NSD cannot be less than 3" )
        Error_Flag = .TRUE. 
        RETURN
     END IF
  CASE DEFAULT
     CALL Err_Msg("ConvectiveMatrix_Class.f90", &
          "getConvectiveMatrix_11()", &
          "No case found for given Xtype, &
          & Make sure it is in the set &
          & [dx, dX, dx1, dX1, x, X, x1, X1], &
          & [dy, dY, dx2, dX2, y, Y, x2, X2], &
          & [dz, dZ, dx3, dX3, z, Z, x3, X3]" )
     Error_Flag = .TRUE.
     RETURN
  END SELECT
#endif

  ALLOCATE( RC( M, 2 ) )
  DO i = 1, M
     RC( i, 1 ) = ( i - 1 ) * NNS + 1
     RC( i, 2 ) = i * NNS 
  END DO

  IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  ALLOCATE( Obj % Mat2( NNS*M, NNS*M ) )
  Obj % Mat2 = 0.0_DFP

  SELECT CASE( TRIM( ADJUSTL( XType ) ) ) 
  CASE( "dx", "dX", "dx1", "dX1", "x", "X", "x1", "X1" )
     Indx = 1_I4B
  CASE( "dy", "dY", "dx2", "dX2", "y", "Y", "x2", "X2" )
     Indx = 2_I4B
  CASE( "dz", "dZ", "dx3", "dX3", "z", "Z", "x3", "X3" )
     Indx = 3_I4B 
  CASE DEFAULT
     Indx = 0_I4B
  END SELECT

  DO IPS = 1, NIPS

     RealVal = Obj % SD( IPS ) % Ws &
          & * Obj % SD( IPS ) % Js_Xi2Xt &
          & * Obj % SD( IPS ) % Thickness
     
     IF( Term1 .EQ. 1 ) THEN
        ! A^T A0
        Aij = MATMUL( TRANSPOSE( A( :, :, IPS ) ), A0( :, :, IPS ) )
        Mat2 = OUTERPROD( a = Obj % SD( IPS ) % dNdXt( :, Indx ), &
             & b = Obj % SD( IPS ) % N )
     ELSE
        ! A0^T A
        Aij = MATMUL( TRANSPOSE( A0( :, :, IPS ) ), A( :, :, IPS ) )
        Mat2 = OUTERPROD( a = Obj % SD( IPS ) % N, &
             & b = Obj % SD( IPS ) % dNdXt( :, Indx ) )
     END IF

     DO j = 1, M
        DO i = 1, M
           Obj % Mat2( RC( i, 1 ) : RC( i, 2 ), &
                & RC( j, 1 ) : RC( j, 2 ) ) = &
                & Aij( i, j ) * RealVal * Mat2
        END DO
     END DO
     
  END DO

  DEALLOCATE( Mat2, RC, Indx, Aij )

END SUBROUTINE getConvectiveMatrix_11

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

