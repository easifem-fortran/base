!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_19.part
!                   Last Update :   Nov-19-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================
!
!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_19
!------------------------------------------------------------------------------
!
 SUBROUTINE getConvectiveMatrix_19( Obj, A, Term1, Term2, Xtype, MultiVar )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  A( :, :, :, : )
!   2.  Term1, Term2 1, or 0
!   3.  Xtype x, y, z
!   4.  MultiVar is just to create another interface
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .


    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
    REAL( DFP ), DIMENSION( :, :, :, : ), INTENT( IN ) :: A
    INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
    CHARACTER( LEN = * ), INTENT( IN ) :: XType
    LOGICAL( LGT ), INTENT( IN ) :: MultiVar

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
                      i, j, r1, r2, c1, c2, M
    REAL( DFP ), ALLOCATABLE :: N( : ), T( : ), dNTdXt( :, :, : )
    REAL( DFP ) :: Ws, Js, thick, RealVal, Jt, Wt, Aij
    INTEGER( I4B ) :: XIndex = 1

    Error_Flag = .FALSE.

#ifdef DEBUG_VER
    IF( .NOT. Obj % isInitiated( ) ) THEN

        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_19()", &
        "STMassMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    
    END IF
#endif

    NIPT = SIZE( Obj % SD, 2 ) 
    NNS = SIZE( Obj % SD( 1,1 ) % N )
    NNT = SIZE( Obj % SD( 1,1 ) % T )
    NIPS = SIZE( Obj % SD, 1 )
    NSD = Obj % SD( 1, 1 ) % getNSD( )

#ifdef DEBUG_VER
    IF( SIZE( A, 3 ) .NE. NIPS .OR. SIZE( A, 4 ) .NE. NIPT ) THEN 

        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_19()", &
        "The Shape of A matrix must be ( *, *, NIPS, NIPT)" &
        )
        Error_Flag = .TRUE.
        RETURN

    END IF
!
!   Flag-3
    IF( SIZE( A, 1 ) .NE. SIZE( A, 2 ) ) THEN 

        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_19()", &
        "The size of first and second dimension of A must be same" &
        )
        Error_Flag = .TRUE.
        RETURN

    END IF
#endif

    M = SIZE( A, 1 )

#ifdef DEBUG_VER
    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_19()", &
                "XType is X therefore NSD should be &
                & greater than or equal to 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_19(), Flag-1", &
                "XType is Y therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_19(), Flag-1", &
                "XType is Z therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT
#endif

    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

            XIndex = 1

        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            XIndex = 2

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            XIndex = 3

    END SELECT 

!
    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS*M, NNS*M, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP
!
    SELECT CASE( Term1 )

        CASE( 1 )

            SELECT CASE( Term2 )

                !( 1, 0 )
                CASE( 0 )

                    DO aa = 1, NNT

                        DO b = 1, NNT

                            DO i = 1, M

                                DO j = 1, M

                                    r1 = ( i - 1_I4B ) * NNS + 1
                                    r2 = i*NNS
                                    c1 = ( j - 1_I4B ) * NNS + 1
                                    c2 = j*NNS

                                    DO IPT = 1, NIPT

                                        DO IPS = 1, NIPS

                                            Aij = A( j, i, IPS, IPT )

                                            Ws = Obj % SD( IPS, IPT ) % getWs( )
                                            Wt = Obj % SD( IPS, IPT ) % getWt( )

                                            Js = Obj % SD( IPS, IPT ) % getJs_Xi2Xt( )
                                            Jt = Obj % SD( IPS, IPT ) % getJt( )
                                            
                                            thick = Obj % SD( IPS, IPT ) % getThickness( )
                                            
                                            CALL Obj % SD( IPS, IPT ) % getT( T )
                                            CALL Obj % SD( IPS, IPT ) % getN( N )
                                            CALL Obj % SD( IPS, IPT ) % getdNTdXt( dNTdXt )
                                            
                                            RealVal = T( b ) * Ws * Wt * Js * Jt * thick * Aij
                                            
                                            Obj % Mat4( r1:r2, c1:c2, aa, b ) = Obj % Mat4( r1:r2, c1:c2, aa, b ) + &
                                            OUTERPROD( a = dNTdXt( :, XIndex, aa ), b = N ) * RealVal

                                        END DO

                                    END DO

                                END DO
                            
                            END DO

                        END DO
                    END DO

                CASE DEFAULT
                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_19()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
            END SELECT

        CASE( 0 )

            SELECT CASE( Term2 )
                
                !( 0, 1 )
                CASE( 1 )

                    SELECT CASE( TRIM( ADJUSTL( XType ) ) )

                        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

                            DO aa = 1, NNT
                                DO b = 1, NNT

                                    DO i = 1, M

                                        DO j = 1, M

                                            r1 = ( i - 1_I4B ) * NNS + 1
                                            r2 = i*NNS
                                            c1 = ( j - 1_I4B ) * NNS + 1
                                            c2 = j*NNS

                                            DO IPT = 1, NIPT

                                                DO IPS = 1, NIPS

                                                    Aij = A( i, j, IPS, IPT )

                                                    Ws = Obj % SD( IPS, IPT ) % getWs( )
                                                    Wt = Obj % SD( IPS, IPT ) % getWt( )

                                                    Js = Obj % SD( IPS, IPT ) % getJs_Xi2Xt( )
                                                    Jt = Obj % SD( IPS, IPT ) % getJt( )
                                                    
                                                    thick = Obj % SD( IPS, IPT ) % getThickness( )
                                                    
                                                    CALL Obj % SD( IPS, IPT ) % getT( T )
                                                    CALL Obj % SD( IPS, IPT ) % getN( N )
                                                    CALL Obj % SD( IPS, IPT ) % getdNTdXt( dNTdXt )
                                                    
                                                    RealVal = T( aa ) * Ws * Wt * Js * Jt * thick * Aij
                                                    
                                                    Obj % Mat4( r1:r2, c1:c2, aa, b ) = Obj % Mat4( r1:r2, c1:c2, aa, b ) + &
                                                    OUTERPROD( a = N, b = dNTdXt( :, 1, b ) ) * RealVal

                                                END DO

                                            END DO

                                        END DO
                                    
                                    END DO

                                END DO
                            END DO

                        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2")

                            DO aa = 1, NNT
                                DO b = 1, NNT

                                    DO i = 1, M

                                        DO j = 1, M

                                            r1 = ( i - 1_I4B ) * NNS + 1
                                            r2 = i*NNS
                                            c1 = ( j - 1_I4B ) * NNS + 1
                                            c2 = j*NNS

                                            DO IPT = 1, NIPT

                                                DO IPS = 1, NIPS

                                                    Aij = A( i, j, IPS, IPT )

                                                    Ws = Obj % SD( IPS, IPT ) % getWs( )
                                                    Wt = Obj % SD( IPS, IPT ) % getWt( )

                                                    Js = Obj % SD( IPS, IPT ) % getJs_Xi2Xt( )
                                                    Jt = Obj % SD( IPS, IPT ) % getJt( )
                                                    
                                                    thick = Obj % SD( IPS, IPT ) % getThickness( )
                                                    
                                                    CALL Obj % SD( IPS, IPT ) % getT( T )
                                                    CALL Obj % SD( IPS, IPT ) % getN( N )
                                                    CALL Obj % SD( IPS, IPT ) % getdNTdXt( dNTdXt )
                                                    
                                                    RealVal = T( aa ) * Ws * Wt * Js * Jt * thick * Aij
                                                    
                                                    Obj % Mat4( r1:r2, c1:c2, aa, b ) = Obj % Mat4( r1:r2, c1:c2, aa, b ) + &
                                                    OUTERPROD( a = N, b = dNTdXt( :, 2, b ) ) * RealVal

                                                END DO

                                            END DO

                                        END DO
                                    
                                    END DO

                                END DO
                            END DO

                        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3")

                            DO aa = 1, NNT
                                DO b = 1, NNT

                                    DO i = 1, M

                                        DO j = 1, M

                                            r1 = ( i - 1_I4B ) * NNS + 1
                                            r2 = i*NNS
                                            c1 = ( j - 1_I4B ) * NNS + 1
                                            c2 = j*NNS

                                            DO IPT = 1, NIPT

                                                DO IPS = 1, NIPS

                                                    Aij = A( i, j, IPS, IPT )

                                                    Ws = Obj % SD( IPS, IPT ) % getWs( )
                                                    Wt = Obj % SD( IPS, IPT ) % getWt( )

                                                    Js = Obj % SD( IPS, IPT ) % getJs_Xi2Xt( )
                                                    Jt = Obj % SD( IPS, IPT ) % getJt( )
                                                    
                                                    thick = Obj % SD( IPS, IPT ) % getThickness( )
                                                    
                                                    CALL Obj % SD( IPS, IPT ) % getT( T )
                                                    CALL Obj % SD( IPS, IPT ) % getN( N )
                                                    CALL Obj % SD( IPS, IPT ) % getdNTdXt( dNTdXt )
                                                    
                                                    RealVal = T( aa ) * Ws * Wt * Js * Jt * thick * Aij
                                                    
                                                    Obj % Mat4( r1:r2, c1:c2, aa, b ) = Obj % Mat4( r1:r2, c1:c2, aa, b ) + &
                                                    OUTERPROD( a = N, b = dNTdXt( :, 3, b ) ) * RealVal

                                                END DO

                                            END DO

                                        END DO
                                    
                                    END DO

                                END DO
                            END DO

                        CASE DEFAULT

                            CALL Err_Msg( &
                            "STConvectiveMatrix_Class.f90", &
                            "getConvectiveMatrix_19()", &
                            "No Case Found for given Xtype" &
                            )
                            Error_Flag = .TRUE.
                            RETURN

                    END SELECT

                CASE DEFAULT

                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_19()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN

            END SELECT

        CASE DEFAULT

            CALL Err_Msg( &
            "STConvectiveMatrix_Class.f90", &
            "getConvectiveMatrix_19()", &
            "Unknown value of Term1; It should be 1 or 0" &
            )
            Error_Flag = .TRUE.
            RETURN

    END SELECT

    IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( N ) ) DEALLOCATE( N )
    IF( ALLOCATED( T ) ) DEALLOCATE( T )
    IF( ALLOCATED( dNTdXt ) ) DEALLOCATE( dNTdXt )

 END SUBROUTINE getConvectiveMatrix_19

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

