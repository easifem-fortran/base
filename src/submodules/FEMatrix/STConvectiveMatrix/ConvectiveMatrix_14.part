!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_14.part
!                   Last Update :   Nov-17-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_14
!------------------------------------------------------------------------------

 SUBROUTINE getConvectiveMatrix_14( Obj, C, Term1, Term2, CType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  C(:,:,:)
!   2.  Term1, Term2 "dx", "dt"
!   3.  Ctype "NodalValues", "QuadPoints"
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: C
    CHARACTER( LEN = * ), INTENT( IN ) :: Term1, Term2
    CHARACTER( LEN = * ), INTENT( IN ) :: CType

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT
    REAL( DFP ), ALLOCATABLE :: cdNTdXt( :, : ), DummyVec1( :, : ), &
                                DummyVec2( :, : )
    REAL( DFP ) :: RealVal
    CLASS( STShapeData_ ), POINTER :: SD

#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_14()", &
        "STMassMatrix_ Object is not Initiated" )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    SELECT CASE( TRIM( ADJUSTL( CType ) ) )

        CASE( "Nodal", "Nodal Values", "NodalValues", &
              "STNodalValues", "ST Nodal Values" )

            CALL Obj % getConvectiveMatrix_11( Term1 = Term1, &
            Term2 = Term2, C = C )

#ifdef DEBUG_VER            
            IF( Error_Flag ) THEN 

                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_14()", &
                "TraceBack >>  &
                & CALL Obj % getConvectiveMatrix_11( Term1 = Term1, &
                & Term2 = Term2, C = C ) " &
                )
            
            END IF
#endif

        CASE( "Integration", "Integration Points", &
              "IntegrationPoints", "Quad", "Quad Points", "QuadPoints" )
        
            NIPT = SIZE( Obj % SD, 2 ) 
            NNS = SIZE( Obj % SD( 1,1 ) % N )
            NNT = SIZE( Obj % SD( 1,1 ) % T )
            NIPS = SIZE( Obj % SD, 1 )

            IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
            ALLOCATE( Obj % Mat2( NNS*NNT, NNS*NNT ) )
            Obj % Mat2 = 0.0_DFP

            SELECT CASE( TRIM( ADJUSTL(Term1) ) ) 

                CASE( "dt", "DT", "Dt", "dT" )

                    SELECT CASE( TRIM( ADJUSTL(Term2) ) )

                        !( dt, dx )
                        CASE( "dx", "dX", "dx1", "dX1", "x", "X", "x1", "X1", &
                              "dy", "dY", "dx2", "dX2", "y", "Y", "x2", "X2", &
                              "dz", "dZ", "dx3", "dX3", "z", "Z", "x3", "X3" )

                            DO IPT = 1, NIPT

                                DO IPS = 1, NIPS

                                    SD => Obj % SD( IPS, IPT )

                                    CALL SD % getProjectionOfdNTdXt( VectorValues = C( :, IPS, IPT ), &
                                    cdNTdXt = cdNTdXt )
#ifdef DEBUG_VER
                                    CALL Check_Error( &
                                    "STConvectiveMatrix_Class.f90", &
                                    "getConvectiveMatrix_14()" &
                                    )
#endif                            

                                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness
                                        
                                    DummyVec1 = RealVal * RESHAPE( SD % dNTdt, (/NNS*NNT, 1/) )
                                    DummyVec2 = RESHAPE( cdNTdXt, (/NNS*NNT, 1/) )

                                    Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + OUTERPROD( a = DummyVec1( :, 1 ), &
                                    b = DummyVec2( :, 1 ) )

                                END DO

                            END DO

#ifdef DEBUG_VER
                        CASE DEFAULT
                    
                            CALL Err_Msg( &
                            "STConvectiveMatrix_Class.f90", &
                            "getConvectiveMatrix_14()", &
                            "Unknown value of Term2; It should be dx or dy or dz" &
                            )
                            Error_Flag = .TRUE.
                            RETURN
#endif    
                    END SELECT

               CASE( "dx", "dX", "dx1", "dX1", "x", "X", "x1", "X1", &
                     "dy", "dY", "dx2", "dX2", "y", "Y", "x2", "X2", &
                     "dz", "dZ", "dx3", "dX3", "z", "Z", "x3", "X3" )

                    SELECT CASE( TRIM( ADJUSTL(Term2) ) )
                        
                        !( dx, dt )
                        CASE( "dt", "DT", "Dt", "dT" )

                            DO IPT = 1, NIPT

                                DO IPS = 1, NIPS

                                    SD => Obj % SD( IPS, IPT )

                                    CALL SD % getProjectionOfdNTdXt( VectorValues = C( :, IPS, IPT ), &
                                    cdNTdXt = cdNTdXt )
#ifdef DEBUG_VER
                                    CALL Check_Error( &
                                    "STConvectiveMatrix_Class.f90", &
                                    "getConvectiveMatrix_14()" &
                                    )
#endif                            
                                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness
                            
                                    DummyVec1 = RealVal * RESHAPE( SD % dNTdt, (/NNS*NNT, 1/) )
                                    DummyVec2 = RESHAPE( cdNTdXt, (/NNS*NNT, 1/) )

                                    Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + OUTERPROD( b = DummyVec1( :, 1 ), &
                                    a = DummyVec2( :, 1 ) )

                                END DO

                            END DO
#ifdef DEBUG_VER
                        CASE DEFAULT

                            CALL Err_Msg( &
                            "STConvectiveMatrix_Class.f90", &
                            "getConvectiveMatrix_14()", &
                            "Unknown value of Term2; It should be 'dt'" &
                            )
                            Error_Flag = .TRUE.
                            RETURN
#endif
                    END SELECT
#ifdef DEBUG_VER
                CASE DEFAULT

                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_14()", &
                    "Unknown value of Term1; It should be 'dt' or 'dx'" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
#endif
            END SELECT

#ifdef DEBUG_VER
        CASE DEFAULT

            CALL Err_Msg( &
            "STConvectiveMatrix_Class.f90", &
            "getConvectiveMatrix_14()", &
            "No case found for given CType; It should be &
            & 'Nodal', 'NodalValues', 'Nodal Values', 'STNodalValues', &
            & 'ST Nodal Values', 'Integation Points', 'Integration', &
            & 'IntegrationPoints', 'Quad', 'Quad Points', 'QuadPoints'" &
            )
            Error_Flag = .TRUE.
            RETURN 
#endif
    END SELECT

    CALL Obj % Mat4FromMat2( NNT, NNT )

    NULLIFY( SD )
    IF( ALLOCATED( cdNTdXt ) ) DEALLOCATE( cdNTdXt )
    IF( ALLOCATED( DummyVec1 ) ) DEALLOCATE( DummyVec1 )
    IF( ALLOCATED( DummyVec2 ) ) DEALLOCATE( DummyVec2 )
    
 END SUBROUTINE getConvectiveMatrix_14

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

