!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_21.part
!                   Last Update :   Nov-19-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_21
!------------------------------------------------------------------------------

 SUBROUTINE getConvectiveMatrix_21( Obj, A, Term1, Term2, Xtype, MultiVar )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  A( :, : )
!   2.  Term1, Term2 "dx" "dt"
!   3.  XType "x, y, z"
!   4.  Multivar is for 
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: A
    INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
    CHARACTER( LEN = * ), INTENT( IN ) :: XType
    LOGICAL( LGT ), INTENT( IN ) :: MultiVar

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
                      i, j, r1, r2, c1, c2, M
    REAL( DFP ), ALLOCATABLE :: Mat3( :, :, : ), Mat4( :, :, :, : )
    REAL( DFP ) :: RealVal, RealVal1, Aij
    INTEGER( I4B ) :: XIndex
    CLASS( STShapeData_ ), POINTER :: SD
    INTEGER( I4B ), ALLOCATABLE :: Indx( :, : )

    XIndex = 1

#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_21()", &
        "STMassMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    NIPT = SIZE( Obj % SD, 2 ) 
    NNS = SIZE( Obj % SD( 1,1 ) % N )
    NNT = SIZE( Obj % SD( 1,1 ) % T )
    NIPS = SIZE( Obj % SD, 1 )
    NSD = Obj % SD( 1, 1 ) % getNSD( )

#ifdef DEBUG_VER
!   Flag-3
    IF( SIZE( A, 1 ) .NE. SIZE( A, 2 ) ) THEN 
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_21()", &
        "The size of first and second dimension of A must be same" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    M = SIZE( A, 1 )

#ifdef DEBUG_VER
    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )
            IF( NSD .LT. 1 ) THEN 
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_21()", &
                "XType is X therefore NSD should be &
                & greater than or equal to 1" &
                )
                Error_Flag = .TRUE.
                RETURN
            END IF
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )
            IF( NSD .LT. 2 ) THEN 
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_21(), Flag-1", &
                "XType is Y therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )
            IF( NSD .LT. 3 ) THEN 
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_21(), Flag-1", &
                "XType is Z therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
            END IF
    END SELECT
#endif

    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

            XIndex = 1

        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            XIndex = 2

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            XIndex = 3

    END SELECT 

    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS*M, NNS*M, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP

    ALLOCATE( Mat3( NNS, NNS, NNT ) )
    ALLOCATE( Mat4( NNS, NNS, NNT, NNT ) )

    ALLOCATE( Indx( M, 2 ) )
    Indx = 0
    DO i = 1, M
        Indx( i, 1 ) = (i-1)*NNS + 1
        Indx( i, 2 ) = i*NNS
    END DO
    
    SELECT CASE( Term1 )

        CASE( 1 )

            SELECT CASE( Term2 )

                !( 1, 0 )
                CASE( 0 )

                    DO IPT = 1, NIPT

                        DO IPS = 1, NIPS

                            SD => Obj % SD( IPS, IPT )

                            RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                            DO aa = 1, NNT

                                Mat3( :, :, aa ) =  OUTERPROD( a = SD % dNTdXt( :, XIndex, aa ), b = SD % N )

                            END DO

                            DO b = 1, NNT 
            
                                RealVal = SD % T( b ) * RealVal1
    
                                Mat4( :, :, :, b ) = Mat3 * RealVal
            
                            END DO

                            DO j = 1, M
                                
                                c1 = Indx( j, 1 )
                                c2 = Indx( j, 2 )

                                DO i = 1, M

                                    r1 = Indx( i, 1 )
                                    r2 = Indx( i, 2 )

                                    Aij = A( j, i )

                                    Obj % Mat4( r1:r2, c1:c2, :, : ) = Obj % Mat4( r1:r2, c1:c2, :, : ) &
                                    + Mat4( :, :, :, : ) * Aij

                                END DO

                            END DO

                        END DO

                    END DO

#ifdef DEBUG_VER
                CASE DEFAULT
                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_21()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
#endif
            END SELECT

        CASE( 0 )

            SELECT CASE( Term2 )
                
                !( 0, 1 )
                CASE( 1 )

                    DO IPT = 1, NIPT

                        DO IPS = 1, NIPS

                            SD => Obj % SD( IPS, IPT )

                            RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                            DO b = 1, NNT

                                Mat3( :, :, b ) =  OUTERPROD( a = SD % N, b = SD % dNTdXt( :, XIndex, b ) )

                            END DO

                            DO aa = 1, NNT 
            
                                RealVal = SD % T( aa ) * RealVal1
    
                                Mat4( :, :, aa, : ) = Mat3 * RealVal
            
                            END DO

                            DO j = 1, M
                                
                                c1 = Indx( j, 1 )
                                c2 = Indx( j, 2 )

                                DO i = 1, M

                                    r1 = Indx( i, 1 )
                                    r2 = Indx( i, 2 )

                                    Aij = A( i, j )

                                    Obj % Mat4( r1:r2, c1:c2, :, : ) = Obj % Mat4( r1:r2, c1:c2, :, : ) &
                                    + Mat4( :, :, :, : ) * Aij

                                END DO

                            END DO

                        END DO

                    END DO

#ifdef DEBUG_VER
                CASE DEFAULT

                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_21()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
#endif
            END SELECT
#ifdef DEBUG_VER
        CASE DEFAULT

            CALL Err_Msg( &
            "STConvectiveMatrix_Class.f90", &
            "getConvectiveMatrix_21()", &
            "Unknown value of Term1; It should be 1 or 0" &
            )
            Error_Flag = .TRUE.
            RETURN
#endif
    END SELECT

    CALL Obj % Mat2FromMat4( )
    NULLIFY( SD )
    ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( Mat3 ) ) DEALLOCATE( Mat3 )
    IF( ALLOCATED( Mat4 ) ) DEALLOCATE( Mat4 )
    IF( ALLOCATED( Indx ) ) DEALLOCATE( Indx )

 END SUBROUTINE getConvectiveMatrix_21

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------