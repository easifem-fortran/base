!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   DiffusionMatrix_16.part
!                   Last Update :   Nov-21-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STDiffusionMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getDiffusionMatrix_16
!------------------------------------------------------------------------------

SUBROUTINE getDiffusionMatrix_16( Obj, c1, c2, c1Type, c2Type )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1.  c1( :, : ), c2( : )
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STDiffusionMatrix_ ), INTENT( INOUT ), TARGET ::  Obj    
#endif
  REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: c1
  REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: c2
  CHARACTER( LEN = * ), INTENT( IN ) :: c1Type, c2Type

  !  Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, NSD
  REAL( DFP ), ALLOCATABLE :: c1dNTdXt( :, : ), c2dNTdXt( :, : ), &
       DummyVec1( : ), DummyVec2( : )
  REAL( DFP ) :: RealVal
  CLASS( STShapeData_ ), POINTER :: SD
  LOGICAL( LGT ) :: isC1Nodal

  isC1Nodal = .TRUE.

#ifdef DEBUG_VER
  !  Flag-1
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg( &
          "STConvectiveMatrix_Class.f90", &
          "getDiffusionMatrix_16(), Flag-1", &
          "STDiffusionMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T ) 
  NSD = Obj % SD( 1,1 ) % getNSD( ) 
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 )

#ifdef DEBUG_VER
  IF( SIZE( C1, 1 ) .NE. SIZE( C2, 1 ) ) THEN
     CALL Err_Msg( &
          "STConvectiveMatrix_Class.f90", &
          "getDiffusionMatrix_16()", &
          "The SIZE(C1, 1) should be equal to SIZE(C2, 1)" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( SIZE( C1, 1 ) .NE. NSD ) THEN
     CALL Err_Msg( &
          "STConvectiveMatrix_Class.f90", &
          "getDiffusionMatrix_16()", &
          "The SIZE(C1, 1), SIZE( C2, 1 ) should be equal to NSD" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( SIZE( C1, 2 ) .NE. NIPS .AND. SIZE( C1, 2 ) .NE. NNS ) THEN 
     CALL Err_Msg( &
          "STConvectiveMatrix_Class.f90", &
          "getDiffusionMatrix_16()", &
          "The SIZE(C1, 2) should be equal to either NIPS, &
          & or NNS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  SELECT CASE( TRIM( ADJUSTL( c1Type ) ) )
  CASE( "Quad", "QuadPoints", "Quad Points", &
       "Integration", "Integration Points", &
       "IntegrationPoints" )
     isC1Nodal = .FALSE.
  END SELECT

  IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  ALLOCATE( Obj % Mat2( NNS*NNT, NNS*NNT ) )
  Obj % Mat2 = 0.0_DFP

  DO IPT = 1, NIPT
     DO IPS = 1, NIPS
        SD => Obj % SD( IPS, IPT )
        RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
             & * SD % Jt * SD % Thickness
        IF( isC1Nodal ) THEN
           CALL SD % getProjectionOfdNTdXt( cdNTdXt = c1dNTdXt, &
                & SpaceNodalValues = C1 )
        ELSE
           CALL SD % getProjectionOfdNTdXt( cdNTdXt = c1dNTdXt, &
                & VectorValues = C1( :, IPS ) )
        END IF

        CALL Obj % SD( IPS, IPT ) % &
             & getProjectionOfdNTdXt( cdNTdXt = c2dNTdXt, &
             & VectorValues = C2 )

        DummyVec1 = RESHAPE( c1dNTdXt, (/NNS*NNT/) )
        DummyVec2 = RealVal * RESHAPE( c2dNTdXt, (/NNS*NNT/) )

        Obj % Mat2 = Obj % Mat2 &
             & + OUTERPROD( a = DummyVec1, b = DummyVec2 )
     END DO
  END DO

  CALL Obj % Mat4FromMat2( I3 = NNT, I4 = NNT )

  NULLIFY( SD )
  IF( ALLOCATED( c1dNTdXt ) ) DEALLOCATE( c1dNTdXt )
  IF( ALLOCATED( c2dNTdXt ) ) DEALLOCATE( c2dNTdXt )
  IF( ALLOCATED( DummyVec1 ) ) DEALLOCATE( DummyVec1 )
  IF( ALLOCATED( DummyVec2 ) ) DEALLOCATE( DummyVec2 )

END SUBROUTINE getDiffusionMatrix_16

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

