!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   DiffusionMatrix_30.part
!                   Last Update :   March-05-2018
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STDiffusionMatrix_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getDiffusionMatrix_30
!------------------------------------------------------------------------------

 SUBROUTINE getDiffusionMatrix_30( Obj, TimeVector, IntegrationSide )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Returns Diffusion matrix for acoustic wave equation
!       2.  Time Integration is character "Right", "Left", "Both"
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STDiffusionMatrix_ ), INTENT( INOUT ), TARGET ::  Obj    
#endif
    REAL( DFP ), INTENT( IN ) :: TimeVector( 2 )
    CHARACTER( LEN = * ), INTENT( IN ) :: IntegrationSide

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
                      i, j, M, p, q
    REAL( DFP ), ALLOCATABLE :: dNTdXt( :, :, : ), T( : ), dNTdXt2( :, :, : )
    REAL( DFP ) :: Ws, Js, thick, RealVal, Jt, Wt, Kij, t1, t2, Theta
    TYPE( STElemShapeData_ ), TARGET :: STElemSD
    CLASS( STShapeData_ ), POINTER :: SD

#ifdef DEBUG_VER
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STDiffusionMatrix_Class.f90", &
        "getDiffusionMatrix_30()", &
        "STDiffusionMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    NNS = Obj % SD( 1,1 ) % getNNS( )
    NNT = Obj % SD( 1,1 ) % getNNT( )
    NSD = Obj % SD( 1, 1 ) % getNSD( )
    NIPS = Obj % getNIPS( )
    NIPT = Obj % getNIPT( )

    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS, NNS, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP

    M = NSD

    t1 = TimeVector( 1 )
    t2 = TimeVector( 2 )
    
    ! Make copy of Obj
    CALL STElemSD % Initiate( Obj )
    
    DO IPT = 1, NIPT

        DO IPS = 1, NIPS

            SD => STElemSD .SDPointer. [IPS, IPT]
            Theta = .Theta. SD
            T = SD .TimeIntegration. [t1, t2, Theta]

            CALL SD % setT( T )
            CALL Check_Error( &
            "STDiffusionMatrix_Class.f90>>DiffusionMatrix_30.part", &
            "Traceback ---> CALL SD % setT( T )"&
            )

            CALL SD % setdNTdXt( )
            CALL Check_Error( &
            "STDiffusionMatrix_Class.f90>>DiffusionMatrix_30.part", &
            "Traceback ---> CALL SD % setdNTdXT(  )"&
            )
            SD => NULL( )

        END DO

    END DO

    DO IPT = 1, NIPT

        DO IPS = 1, NIPS

            Ws = Obj % SD( IPS, IPT ) % getWs( )
            Wt = Obj % SD( IPS, IPT ) % getWt( )

            Js = Obj % SD( IPS, IPT ) % getJs_Xi2Xt( )
            Jt = Obj % SD( IPS, IPT ) % getJt( )
            
            thick = Obj % SD( IPS, IPT ) % getThickness( )
            
            CALL Obj % SD( IPS, IPT ) % getdNTdXt( dNTdXt )
            CALL STElemSD % SD( IPS, IPT ) % getdNTdXt( dNTdXt2 )
            
            RealVal = Ws * Wt * Js * Jt * thick

            DO aa = 1, NNT

                DO b = 1, NNT

                    DO p = 1, NSD

                        SELECT CASE( TRIM( IntegrationSide ) )

                            CASE( "Right", "RIGHT", "right" )
                            Obj % Mat4( :, :, aa, b ) = &
                            Obj % Mat4( :, :, aa, b ) + &
                            OUTERPROD( a = dNTdXt( :, p, aa ), &
                            b = dNTdXt2( :, p, b ) ) * RealVal

                            CASE( "Left", "LEFT", "left" )
                            Obj % Mat4( :, :, aa, b ) = &
                            Obj % Mat4( :, :, aa, b ) + &
                            OUTERPROD( a = dNTdXt2( :, p, aa ), &
                            b = dNTdXt( :, p, b ) ) * RealVal

                            CASE( "Both", "BOTH", "both" )
                            Obj % Mat4( :, :, aa, b ) = &
                            Obj % Mat4( :, :, aa, b ) + &
                            OUTERPROD( a = dNTdXt2( :, p, aa ), &
                            b = dNTdXt2( :, p, b ) ) * RealVal

                            CASE DEFAULT
                            Obj % Mat4( :, :, aa, b ) = &
                            Obj % Mat4( :, :, aa, b ) + &
                            OUTERPROD( a = dNTdXt( :, p, aa ), &
                            b = dNTdXt( :, p, b ) ) * RealVal

                        END SELECT

                    END DO

                END DO

            END DO
        
        END DO

    END DO

    IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( dNTdXt ) ) DEALLOCATE( dNTdXt )
    IF( ALLOCATED( dNTdXt2 ) ) DEALLOCATE( dNTdXt2 )
    IF( ALLOCATED( T ) ) DEALLOCATE( T )
    CALL STElemSD % DeallocateData( )
    SD => NULL( )

 END SUBROUTINE getDiffusionMatrix_30

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

