!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   FextVector_10.part
!                   Last Update :   Nov-23-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!       -   Space Interpolation of scalar and vector
!
!   HOSTING FILE
!       -    STFextVector_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                              getFextVector_10
!------------------------------------------------------------------------------

SUBROUTINE getFextVector_10( Obj, Fext, C, FextType, CType )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1. Fext denotes space-time nodal value, C denotes constant value
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STFextVector_ ), INTENT( INOUT ), TARGET ::  Obj
#endif

  REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: Fext
  REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: C
  CHARACTER( LEN = * ), INTENT( IN ) :: FextType, CType

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, M, NSD
  REAL( DFP ), ALLOCATABLE :: cdNTdXt( :, : ), Fbar( : )
  REAL( DFP ) :: RealVal
  LOGICAL( LGT ) :: isFNodal
  CLASS( STShapeData_ ), POINTER :: SD

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg("STFextVector_Class.f90", &
          "getFextVector_10(), Flag-1", &
          "STFextVector_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = Obj % SD( 1,1 ) % getNNS( )
  NSD = Obj % SD( 1,1 ) % getNSD( )
  NNT = Obj % SD( 1,1 ) % getNNT( ) 
  NIPS = Obj % getNIPS( )
  NIPT = Obj % getNIPT( )

#ifdef DEBUG_VER
  IF( SIZE( Fext, 2 ) .NE. NNS .AND. SIZE( Fext, 2 ) .NE. NIPS ) THEN
     CALL Err_Msg("STFextVector_Class.f90", &
          & "getFextVector_10(), Flag-2", &
          & "The SIZE( Fext, 2 ) should be equal to NNS or NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( Fext, 3 ) .NE. NNT .AND. SIZE( Fext, 3 ) .NE. NIPT ) THEN
     CALL Err_Msg("STFextVector_Class.f90", &
          & "getFextVector_10(), Flag-3", &
          & "The SIZE( Fext, 3 ) should be equal to NNT, or NIPT" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( C, 1 ) .NE. NSD ) THEN
     CALL Err_Msg("STFextVector_Class.f90", &
          & "getFextVector_10(), Flag-4", &
          & "The SIZE( C, 1 ) should be equal to NSD" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  isFNodal = .TRUE.
  SELECT CASE( TRIM( ADJUSTL( FextType ) ) )
  CASE( 'Quad', 'QuadPoints', 'Quad Points', &
       & 'Integration', 'Integration Points', &
       & 'IntegrationPoints' )
     isFNodal = .FALSE.
  END SELECT

  M = SIZE( Fext, 1 )
  ALLOCATE( Fbar( M ) )
  IF( ALLOCATED( Obj % Vec3 ) ) DEALLOCATE( Obj % Vec3 )
  ALLOCATE( Obj % Vec3( M, NNS, NNT ) )
  Obj % Vec3 = 0.0_DFP

  DO IPT = 1, NIPT
     DO IPS = 1, NIPS

        SD => Obj%SD(IPS,IPT)
        RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
             & * SD % Jt * SD % Thickness

        CALL SD % getProjectionOfdNTdXt( &
             & VectorValues = C, cdNTdXt = cdNTdXt )

        IF( isFNodal ) THEN
           CALL SD % getInterpolationOfVector( &
                & STNodalValues = Fext, Val = Fbar )
        ELSE
           Fbar = Fext( :, IPS, IPT )
        END IF

        DO a = 1, NSD
           Obj % Vec3( a, :, : )  = Obj % Vec3( a, :, : ) + &
                & RealVal * cdNTdXt * Fbar( a )
        END DO
     END DO
  END DO

  DEALLOCATE( Fbar, cdNTdXt )
  NULLIFY( SD )

END SUBROUTINE getFextVector_10

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

