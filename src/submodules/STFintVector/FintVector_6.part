!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   FintVector_6.part
!                   Last Update :   Jan-04-2018
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!       -   Method for computing the Spacetime Fint vector
!
!   HOSTING FILE
!       -    STFintVector_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                              getFintVector_6
!------------------------------------------------------------------------------

SUBROUTINE getFintVector_6( Obj, CData )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !       1.  Returns element Fint vector for space time element;
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE ConstitutiveData_Class
  USE Stress_Class

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STFintVector_ ), INTENT( INOUT ), TARGET ::  Obj
#endif

  CLASS( ConstitutiveData_ ), INTENT( IN ), TARGET :: CData

  ! Define internal variables
  INTEGER( I4B ) :: N, NSD
  REAL( DFP ), ALLOCATABLE :: Sigma( : )

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg( &
          "STFintVector_Class.f90", &
          "getFintVector_6(Obj, CData)", &
          "STFintVector_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NSD = Obj % SD( 1,1 ) % getNSD( )
  SELECT CASE( NSD )
  CASE( 3 )
     N = 6
  CASE( 2 )
     N = 4
  CASE( 1 )
     N = 1
  END SELECT
  ALLOCATE( Sigma( N ) )
  Sigma( : ) = CData % S .Shape. N
  CALL Obj % getFintVector_3( Sigma )
  DEALLOCATE( Sigma )

END SUBROUTINE getFintVector_6

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

