!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   StiffnessMatrix_2.part
!                   Last Update :   Nov-23-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STStiffnessMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getStiffnessMatrix_2
!------------------------------------------------------------------------------

SUBROUTINE getStiffnessMatrix_2( Obj, Cijkl )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !       1.  Returns Stiffness Matrix
  !       2.  Cijkl is constant in time
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STStiffnessMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
  REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: Cijkl

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
       i, j, sizeOFC
  INTEGER( I4B ), ALLOCATABLE :: Indx( :, : )

  REAL( DFP ) :: RealVal
  REAL( DFP ), ALLOCATABLE :: Ce( :, : ), BMat( :, : ), BTMat( :, : )

  CLASS( STShapeData_ ), POINTER :: SD

#ifdef DEBUG_VER
  IF( .NOT. Obj % isInitiated( ) ) THEN
     Error_Flag = .FALSE.
     CALL Err_Msg( &
          "STStiffnessMatrix_Class.f90", &
          "getStiffnessMatrix_2()", &
          "STStiffnessMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NIPS = Obj % getNIPS( )
  NIPT = Obj % getNIPT( )

#ifdef DEBUG_VER
  IF( SIZE( Cijkl, 3 ) .NE. NIPS  ) THEN 
     CALL Err_Msg( &
          "STStiffnessMatrix_Class.f90", &
          "getStiffnessMatrix_2()", &
          "The SIZE( Cijkl, 3 ) should be NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
  IF( SIZE( Cijkl, 1 ) .NE. SIZE( Cijkl, 2 ) ) THEN 
     CALL Err_Msg( &
          "STStiffnessMatrix_Class.f90", &
          "getStiffnessMatrix_2()", &
          "The size of first and second dimension of Cijkl must be same" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NSD = Obj % SD( 1, 1 ) % getNSD( )
  SizeOfC = SIZE( Cijkl, 1 )

#ifdef DEBUG_VER
  IF( NSD .EQ. 2 ) THEN
     IF( SizeOfC .NE. 4 &
          .AND. SizeOfC .NE. 3 ) THEN
        CALL Err_Msg( &
             "STStiffnessMatrix_Class.f90", &
             "getStiffnessMatrix_2()", &
             "In case of NSD = 2, SIZE( Cijkl, 1 ) should be &
             & either 3, 4" )
        Error_Flag = .TRUE.
        RETURN
     END IF
  END IF
  IF( NSD .EQ. 3 ) THEN
     IF( SizeOfC .NE. 6 ) THEN
        CALL Err_Msg( &
             "STStiffnessMatrix_Class.f90", &
             "getStiffnessMatrix_2(), Flag-5", &
             "In case of NSD = 3, SIZE( Cijkl, 1 ) should be &
             & equal to 6" )
        Error_Flag = .TRUE.
        RETURN
     END IF
  END IF
#endif

  ! Make Indx
  SELECT CASE( NSD )
  CASE( 1 )
     ALLOCATE( Indx( 1, 1 ) ) 
     Indx = 1
  CASE( 2 ) 
     Indx = RESHAPE( (/1,3,3,2/), (/2,2/) )
  CASE( 3 )
     Indx = RESHAPE( (/1,4,6,4,2,5,6,5,3/), (/3,3/) )
  END SELECT

  NNS = Obj % SD( 1,1 ) % getNNS( )
  NNT = Obj % SD( 1,1 ) % getNNT( )

  IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
  ALLOCATE( Obj % Mat4( NNS*NSD, NNS*NSD, NNT, NNT ) )
  Obj % Mat4 = 0.0_DFP

  ALLOCATE( Ce( NSD * NSD, NSD * NSD ) )
  ALLOCATE( BMat( NSD*NNS, NSD*NSD ), BTMat( NSD*NSD, NSD*NNS ) )
  BMat = 0.0_DFP
  BTMat = 0.0_DFP

  DO IPS = 1, NIPS

     DO j = 1, NSD
        DO i = 1, NSD
           Ce( (i-1) * NSD + 1 : i * NSD, (j-1) * NSD + 1 : j * NSD ) &
                & = Cijkl( Indx( :, i ), Indx( :, j ), IPS )
        END DO
     END DO

     DO IPT = 1, NIPT
        SD => Obj % SD( IPS, IPT )
        RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt & 
             & * SD % Jt * SD % Thickness

        DO b = 1, NNT
           DO i = 1, NSD
              BTMat( (i-1) * NSD + 1 : i * NSD, (i-1) * NNS + 1 : i * NNS ) = &
                   & TRANSPOSE( SD % dNTdXt( :, :, b ) )
           END DO
           DO aa = 1, NNT
              DO i = 1, NSD
                 BMat( (i-1) * NNS + 1 : i * NNS, (i-1) * NSD + 1 : i * NSD ) = &
                      & SD % dNTdXt( :, :, aa )
              END DO
              Obj % Mat4( :, :, aa, b ) = Obj % Mat4( :, :, aa, b ) + &
                   & RealVal * MATMUL( MATMUL( BMat, Ce ), BTMat )
           END DO
        END DO
     END DO
  END DO

  CALL Obj % Mat2FromMat4( )
  DEALLOCATE( Ce, Indx, BMat, BTMat )

END SUBROUTINE getStiffnessMatrix_2

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------
