!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   MassMatrix_15.part
!                   Last Update :   Feb-09-2018
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!       -   Space time mass matrix due to linearization of convective term
!
!   HOSTING FILE
!       -    MassMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                              getMassMatrix_15
!------------------------------------------------------------------------------

SUBROUTINE getMassMatrix_15( Obj, U, dCdU, Term1, Term2, dCdU_Type )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1.  Returns mass matrix
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STMassMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif

  REAL( DFP ), INTENT( IN ) :: U( :, :, : ), dCdU( :, :, :, : )
  INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
  CHARACTER( LEN = * ), INTENT( IN ) :: dCdU_Type

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, NSD, &
       a, b, r1, r2, c1, c2, p, q, tSize
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : ), dCdU_( :, : ), dUdX( :, : ), &
       dUdU( :, : ), Mat4( :, :, :, : ), Mat3( :, :, : )
  REAL( DFP ) :: RealVal
  INTEGER( I4B ), ALLOCATABLE :: Indx( :, : )
  LOGICAL( LGT ) :: dCdU_Nodal
  CLASS( STShapeData_ ), POINTER :: SD

  dCdU_Nodal = .TRUE.

  ! Flag-1
#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_15(), Flag-1", &
          "STMassMatrix_ Object is not Initiated" &
          )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T )
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 )
  NSD = Obj % SD( 1, 1 ) % getNSD( )

  ! Make Indx
  tSize = SIZE( dCdU, 1 )
  a = SIZE( dCdU, 3 )
  b = SIZE( dCdU, 4 )

#ifdef DEBUG_VER
  IF( a .NE. NNS .AND. a .NE. NIPS ) THEN
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          & "getMassMatrix_15( Obj, U, dCdU, Term1, Term2, dCdU_Type )", &
          & "The size of third index of dCdU must be equal to &
          & the NNS or NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( b .NE. NNT .AND. b .NE. NIPT ) THEN
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          & "getMassMatrix_15( Obj, U, dCdU, Term1, Term2, dCdU_Type )", &
          & "The size of fourth index of dCdU must be equal &
          & to the NNT or NIPT" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( tSize .NE. NSD ) THEN
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_15( Obj, U, dCdU, Term1, Term2, dCdU_Type )", &
          & "The size of first two indices of dCdU must be &
          & equal to the NSD" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  ALLOCATE( Indx( NSD, 2 ) )

  DO p = 1, NSD
     Indx( p, 1 ) = ( p - 1 ) * NNS + 1
     Indx( p, 2 ) = p * NNS
  END DO

  ! Check the type of dCdU

  SELECT CASE( TRIM( dCdU_Type ) )
 
#ifdef DEBUG_VER
  CASE( "Nodal", "NodalValues", "Nodal Values", "SpaceNodalValues", &
       & "Space Nodal Values" )
     dCdU_Nodal = .TRUE.
#endif
  CASE( "QuadPoints", "Quad", "Integration", "Integration Points", &
       & "IntegrationPoints", "Quad Points")
     dCdU_Nodal = .FALSE.

#ifdef DEBUG_VER
  CASE DEFAULT
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_15( Obj, U, dCdU, Term1, Term2, dCdU_Type )", &
          & "dCdU_Type should be either NodalValues or QuadPoints" )
     Error_Flag = .TRUE.
     RETURN
#endif
  END SELECT

  IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
  ALLOCATE( Obj % Mat4( NNS*NSD, NNS*NSD, NNT, NNT ) )
  Obj % Mat4 = 0.0_DFP;

  SELECT CASE( Term1 )
  CASE( 1 )
     SELECT CASE( Term2 )
        !( 1, 0 )
     CASE( 0 )
        ALLOCATE( Mat3( NNS, NNS, NNT ), Mat4( NNS, NNS, NNT, NNT ) )
        DO IPT= 1, NIPT
           DO IPS = 1, NIPS
              SD => Obj % SD( IPS, IPT )
              RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
                   & * SD % Jt * SD % Thickness
              IF( dCdU_Nodal ) THEN
                 CALL SD % getInterpolationOfMatrix( STNodalValues = dCdU, &
                      & Val = dCdU_ )
              ELSE
                 dCdU_ = dCdU( :, :, IPS, IPT )
              END IF

              ! Compute dUdx
              dUdx = SD .dVdXt. U
              ! Compute dUdU
              dUdU = MATMUL( dUdx, dCdU_ )
              DO a = 1, NNT
                 Mat3( :, :, a ) = OUTERPROD( SD % dNTdt( :, a ), SD % N )
              END DO

              DO b = 1, NNT
                 Mat4( :, :, :, b ) = Mat3 * ( RealVal * SD % T( b ) )
              END DO

              DO q = 1, NSD
                 c1 = Indx( q, 1 ); c2 = Indx( q, 2 )
                 DO p = 1, NSD
                    r1 = Indx( p, 1 ); r2 = Indx( p, 2 )
                    Obj % Mat4( r1:r2, c1:c2, :, : ) = &
                         Obj % Mat4( r1:r2, c1:c2, :, : ) &
                         & + Mat4 * dUdU( p, q )
                 END DO
              END DO
           END DO
        END DO

#ifdef DEBUG_VER
     CASE DEFAULT
        CALL Err_Msg( &
             & "STMassMatrix_Class.f90", &
             & "getMassMatrix_15(), Flag-1", &
             & "Unknown value of Term2; It should be 1 or 0" )
        Error_Flag = .TRUE.
        RETURN
#endif
     END SELECT

  CASE( 0 )
     SELECT CASE( Term2 )
        !( 0, 0 )
     CASE( 0 )
        ALLOCATE( Mat4( NNS, NNS, NNT, NNT ) )
        DO IPT= 1, NIPT
           DO IPS = 1, NIPS
              SD => Obj % SD( IPS, IPT )
              RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
                   & * SD % Jt * SD % Thickness
              IF( dCdU_Nodal ) THEN
                 CALL SD % getInterpolationOfMatrix( STNodalValues = dCdU, &
                      & Val = dCdU_ )
              ELSE
                 dCdU_ = dCdU( :, :, IPS, IPT )
              END IF

              ! Compute dUdx
              dUdx = SD .dVdXt. U
              ! Compute dUdU
              dUdU = MATMUL( dUdx, dCdU_ )

              Mat2 = OUTERPROD( SD % N, SD % N )
              DO b = 1, NNT
                 DO a = 1, NNT
                    Mat4( :,:,a,b) = Mat2 *( SD % T( a ) &
                         & * SD % T(b) * RealVal )
                 END DO
              END DO

              DO q = 1, NSD
                 c1 = Indx( q, 1 ); c2 = Indx( q, 2 )
                 DO p = 1, NSD
                    r1 = Indx( p, 1 ); r2 = Indx( p, 2 )
                    Obj % Mat4( r1:r2, c1:c2, :, : ) = &
                         & Obj % Mat4( r1:r2, c1:c2, :, : ) &
                         & + Mat4 * dUdU( p, q )
                 END DO
              END DO
           END DO
        END DO

#ifdef DEBUG_VER
     CASE DEFAULT
        CALL Err_Msg( &
             & "STMassMatrix_Class.f90", &
             & "getMassMatrix_15(), Flag-1", &
             & "Unknown value of Term2; It should be 1 or 0" )
        Error_Flag = .TRUE.
        RETURN
#endif
     END SELECT

#ifdef DEBUG_VER
  CASE DEFAULT
     CALL Err_Msg( &
          "STMassMatrix_Class.f90", &
          "getMassMatrix_15(), Flag-1", &
          "Unknown value of Term1; It should be 1 or 0" )
     Error_Flag = .TRUE.
     RETURN
#endif
  END SELECT

  CALL Obj % Mat2FromMat4( )
  NULLIFY( SD )
  ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  IF( ALLOCATED( Indx ) ) DEALLOCATE( Indx )
  IF( ALLOCATED( Mat2 ) ) DEALLOCATE( Mat2 )
  IF( ALLOCATED( Mat3 ) ) DEALLOCATE( Mat3 )
  IF( ALLOCATED( Mat4 ) ) DEALLOCATE( Mat4 )
  IF( ALLOCATED( dCdU_ ) ) DEALLOCATE( dCdU_ )
  IF( ALLOCATED( dUdU ) ) DEALLOCATE( dUdU )
  IF( ALLOCATED( dUdX ) ) DEALLOCATE( dUdX )

END SUBROUTINE getMassMatrix_15

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

