!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   DiffusionMatrix_28.part
!                   Last Update :   Nov-21-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STDiffusionMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getDiffusionMatrix_28
!------------------------------------------------------------------------------

SUBROUTINE getDiffusionMatrix_28( Obj, K, Term1, Term2 )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1.  K( :, :, : )
  !   2.  Term1, Term2 {dx, dy, dz}
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STDiffusionMatrix_ ), INTENT( INOUT ), TARGET ::  Obj    
#endif
  REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: K
  CHARACTER( LEN = * ), INTENT( IN ) :: Term1, Term2

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
       i, j, r1, r2, c1, c2, M
  REAL( DFP ) :: RealVal1, RealVal
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : ), Mat4( :, :, :, : )

  INTEGER( I4B ), ALLOCATABLE :: Indx( :, : )
  INTEGER( I4B ) :: XIndx1, XIndx2

  CLASS( STShapeData_ ), POINTER :: SD

  XIndx1 = 1
  XIndx2 = 1

#ifdef DEBUG_VER
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg("STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_28(), Flag-1", &
          "STDiffusionMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T ) 
  NSD = Obj % SD( 1,1 ) % getNSD( ) 
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 )

#ifdef DEBUG_VER
  IF( SIZE( K, 3 ) .NE. NIPS ) THEN 
     CALL Err_Msg("STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_28(), Flag-2", &
          "The SIZE( K, 3 ) should be NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( SIZE( K, 1 ) .NE. SIZE( K, 2 ) ) THEN 
     CALL Err_Msg("STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_28(), Flag-3", &
          "The size of first and second dimension of K must be same" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  M = SIZE( K, 1 )

#ifdef DEBUG_VER
  SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )

  CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )
     IF( NSD .LT. 1 ) THEN
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term1 is 'x' or 'dx' therefore NSD should be &
             & greater than or equal to 1" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )
     IF( NSD .LT. 2 ) THEN
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term1 is 'dy' or 'y', &
             & therefore NSD should be greater than 1" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )
     IF( NSD .LT. 3 ) THEN
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term1 is 'dz' or 'z', therefore, &
             & NSD should be greater than 2" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  END SELECT

  SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
  CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )
     IF( NSD .LT. 1 ) THEN
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term2 is 'x' or 'dx' therefore NSD should be &
             & greater than or equal to 1" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )
     IF( NSD .LT. 2 ) THEN 
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term2 is 'dy' or 'y', &
             & therefore NSD should be greater than 1" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )
     IF( NSD .LT. 3 ) THEN 
        CALL Err_Msg("STDiffusionMatrix_Class.f90", &
             "getDiffusionMatrix_28()", &
             "Term2 is 'dz' or 'z', therefore, &
             & NSD should be greater than 2" )
        Error_Flag = .TRUE.
        RETURN
     END IF

  END SELECT
#endif

  IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
  ALLOCATE( Obj % Mat4( NNS*M, NNS*M, NNT, NNT ) )
  Obj % Mat4 = 0.0_DFP
  ALLOCATE( Mat4( NNS, NNS, NNT, NNT ) )

  ALLOCATE( Indx( M, 2 ) )
  Indx = 0
  DO i = 1, M
     Indx( i, 1 ) = (i-1)*NNS + 1
     Indx( i, 2 ) = i*NNS
  END DO

  SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )
  CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )
     XIndx1 = 1
  CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )
     XIndx1 = 2
  CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )
     XIndx1 = 3
  END SELECT

  SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
  CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )
     XIndx2 = 1
  CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )
     XIndx2 = 2
  CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )
     XIndx2 = 3
  END SELECT

  DO IPT = 1, NIPT
     DO IPS = 1, NIPS
        SD => Obj % SD( IPS, IPT )
        RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
             & * SD % Jt * SD % Thickness
        DO b = 1, NNT
           DO aa = 1, NNT
              Mat4( :, :, aa, b ) = &
                   & OUTERPROD( a = SD % dNTdXt( :, XIndx1, aa ), &
                   & b = SD % dNTdXt( :, XIndx2, b )  )
           END DO
        END DO

        Mat2 = K( :, :, IPS )

        DO j =  1, M
           c1 = Indx( j, 1 )
           c2 = Indx( j, 2 )
           DO i = 1, M
              r1 = Indx( i, 1 )
              r2 = Indx( i, 2 )
              RealVal = Mat2( i, j ) * RealVal1
              Obj % Mat4( r1:r2, c1:c2, :, : ) = &
                   Obj % Mat4( r1:r2, c1:c2, :, : ) + Mat4*RealVal
           END DO
        END DO
     END DO
  END DO

  CALL Obj % Mat2FromMat4( )
  NULLIFY( SD )
  IF( ALLOCATED( Mat2 ) ) DEALLOCATE( Mat2 )
  IF( ALLOCATED( Mat4 ) ) DEALLOCATE( Mat4 )
  IF( ALLOCATED( Indx ) ) DEALLOCATE( Indx )

END SUBROUTINE getDiffusionMatrix_28

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

