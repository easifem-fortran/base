!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   DiffusionMatrix_4.part
!                   Last Update :   Nov-20-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STDiffusionMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getDiffusionMatrix_4
!------------------------------------------------------------------------------

SUBROUTINE getDiffusionMatrix_4( Obj, K )

  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
  !   1.  K( :, :, : )
  !.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

  USE Utility, ONLY : OUTERPROD

  ! Define intent of dummy variables
#ifdef STMat
  CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
  CLASS( STDiffusionMatrix_ ), INTENT( INOUT ), TARGET ::  Obj    
#endif
  REAL( DFP ), DIMENSION( :, :, : ), INTENT( IN ) :: K

  ! Define internal variables
  INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, &
       NSD, j
  REAL( DFP ), ALLOCATABLE :: Mat2( :, : ), DummyMat3( :,:,: ), &
       DummyVec1( : ), DummyVec2( : )
  REAL( DFP ) :: RealVal
  CLASS( STShapeData_ ), POINTER :: SD

#ifdef DEBUG_VER
  Error_Flag = .FALSE.
  IF( .NOT. Obj % isInitiated( ) ) THEN
     CALL Err_Msg( &
          & "STDiffusionMatrix_Class.f90", &
          & "getDiffusionMatrix_4(), Flag-1", &
          & "STDiffusionMatrix_ Object is not Initiated" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  NNS = SIZE( Obj % SD( 1,1 ) % N )
  NNT = SIZE( Obj % SD( 1,1 ) % T ) 
  NSD = Obj % SD( 1,1 ) % getNSD( ) 
  NIPS = SIZE( Obj % SD, 1 )
  NIPT = SIZE( Obj % SD, 2 )

#ifdef DEBUG_VER
  IF( SIZE( K, 1 ) .NE. SIZE( K, 2 ) ) THEN
     CALL Err_Msg( &
          "STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_4()", &
          "The SIZE(K, 1) should be equal to SIZE(K, 2)" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( SIZE( K, 1 ) .NE. NSD ) THEN
     CALL Err_Msg( &
          "STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_4()", &
          "The SIZE(K, 1) should be equal to NSD" )
     Error_Flag = .TRUE.
     RETURN
  END IF

  IF( SIZE( K, 3 ) .NE. NIPS ) THEN 
     CALL Err_Msg( &
          "STDiffusionMatrix_Class.f90", &
          "getDiffusionMatrix_4()", &
          "The SIZE(K, 3) should be equal to NIPS" )
     Error_Flag = .TRUE.
     RETURN
  END IF
#endif

  IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
  ALLOCATE( Obj % Mat2( NNS*NNT, NNS*NNT ) )
  Obj % Mat2 = 0.0_DFP

  ALLOCATE( DummyMat3( NNS, NSD, NNT ) )
  ALLOCATE( DummyVec1( NNT*NNS ), DummyVec2( NNT*NNS ) )

  DO IPS = 1, NIPS
     Mat2 = K( :, :, IPS )
     DO IPT = 1, NIPT
        SD => Obj % SD( IPS, IPT )
        RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt &
             & * SD % Jt * SD % Thickness
        DO a = 1, NNT
           DummyMat3( :, :, a ) = MATMUL( SD % dNTdXt( :, :, a ), Mat2 )
        END DO
        DO j = 1, NSD
           DummyVec1 = RESHAPE( SD % dNTdXt( :, j, : ), (/NNS*NNT/) )
           DummyVec2 = RealVal*RESHAPE( DummyMat3(:,j,:), (/NNS*NNT/) )

           Obj % Mat2( :, : ) = Obj % Mat2( :, : ) &
                + OUTERPROD( a = DummyVec1, b = DummyVec2 )
        END DO
     END DO
  END DO

  CALL Obj % Mat4FromMat2( I3 = NNT, I4 = NNT )

  NULLIFY( SD )
  IF( ALLOCATED( Mat2 ) ) DEALLOCATE( Mat2 )
  IF( ALLOCATED( DummyVec1 ) ) DEALLOCATE( DummyVec1 )
  IF( ALLOCATED( DummyVec2) ) DEALLOCATE( DummyVec2)
  IF( ALLOCATED( DummyMat3 ) ) DEALLOCATE( DummyMat3 )

END SUBROUTINE getDiffusionMatrix_4

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

