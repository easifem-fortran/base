!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Display.part
!                   Last Update :   Dec-17-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Display DeformationGradinet object
!   HOSTING FILE
!       -   DeformationGradient_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                                      Display
!------------------------------------------------------------------------------

 SUBROUTINE Display( Obj, UnitNo )

    USE Utility, ONLY: Display_Array

!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  Display the content
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( DeformationGradient_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ), OPTIONAL :: UnitNo

    ! Define internal variables
    INTEGER( I4B ) :: I, j

    IF( PRESENT( UnitNo ) ) THEN
        I = UnitNo
    ELSE
        I = 6
    END IF

    IF( .NOT. ALLOCATED( Obj % T ) ) THEN

        CALL BlankLines( UnitNo = I )
        WRITE( I, "(A)" ) "DeformationGradient_ Object is not initiated "
        WRITE( I, "(A)" ) "Nothing to show "
        CALL BlankLines( UnitNo = I )
        RETURN

    END IF

    CALL BlankLines( UnitNo = I )
    CALL EqualLine( UnitNo = I )
    WRITE( I, "(5X, A)" ) "|||| Deformation Gradient Obj Data ||||"
    CALL EqualLine( UnitNo = I )
    CALL BlankLines( UnitNo = I )



    CALL BlankLines( UnitNo = I )
    WRITE( I, "(A)" ) "F = "
    CALL BlankLines( UnitNo = I )

    DO j = 1, 3

        WRITE( I, "(4x, 3G17.7)" ) Obj % T( j, : )

    END DO
    CALL BlankLines( UnitNo = I )

    WRITE( I, "(A, I2 )" ) "NSD = ", Obj % NSD
    CALL BlankLines( UnitNo = I )

    IF( ALLOCATED( Obj % R ) ) THEN

        CALL Display_Array( Obj % R, " R ", I )

    END IF

    IF( ALLOCATED( Obj % U ) ) THEN

        CALL Display_Array( Obj % U, " U ", I )

    END IF

    IF( ALLOCATED( Obj % V ) ) THEN

        CALL Display_Array( Obj % V, " V ", I )

    END IF

    IF( ALLOCATED( Obj % EigenVal ) ) THEN

        CALL Display_Array( Obj % EigenVal, " EigenValues ", I )

    END IF

    IF( ALLOCATED( Obj % EigenVec_U ) ) THEN

        CALL Display_Array( Obj % EigenVec_U, " Eigen Vectors of U ", I )

    END IF

    IF( ALLOCATED( Obj % EigenVec_V ) ) THEN

        CALL Display_Array( Obj % EigenVec_V, " Eigen Vectors of V ", I )

    END IF

    CALL DashLine( UnitNo = I )
    CALL BlankLines( UnitNo = I )

 END SUBROUTINE Display
!