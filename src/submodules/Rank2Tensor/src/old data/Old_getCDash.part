!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   getCDash.part
!                   Last Update :   August-27-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   Type:: Module
!
!   Info::  -   This part includes subroutine for getting C-Dash Matrix
!               C-Dash is a matrix for 4th order tensor which has both major
!               and Minor symmetry. C-dash is only the funciton of Cauchy Stress
!               C_dash : d = Sigma . d + d . Sigma
!
!
!==============================================================================
!
! List of items
!
!
!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------
!                                                            getCSigmaTruesdell
!------------------------------------------------------------------------------
!
 SUBROUTINE getCDash( C, Stress, StressType, F, J )
!
!   Description
!------------------------------------------------------------------------------
!       1.  This Function computes "CDash" which is frequently appeared
!           in computing CsigmaTruesdell.
!           StressType is for Stress Tensor
!       2.  C has INTENT(OUT)
!       3.  F and J are Optional arguments which are needed incase StressType
!           is not Cauchy Stress. It will be used for conversion
!
!------------------------------------------------------------------------------
!  Define arguments of dummy argument
    REAL( DFP ), DIMENSION( :, : ), INTENT( OUT ) :: C
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Stress
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ), OPTIONAL :: F
    REAL( DFP ), INTENT( IN ), OPTIONAL :: J
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType
!
! Define internal variables
    REAL( DFP ), DIMENSION( :, : ), ALLOCATABLE :: Sigma
    REAL( DFP ) :: d2 = 2.0_DFP, pt5 = 0.5_DFP
!
    Error_Flag = .FALSE.
!
! get Cauchy Stress
    ALLOCATE( Sigma( SIZE( Stress, 1 ), SIZE( Stress, 2 ) ) )
! Flag-1
    CALL getCauchyStress( Sigma = Sigma, Stress = Stress, &
    StressType = StressType )
    CALL Check_Error( "Utility>>Tensor.F90>>getCDash.part", &
    "getCDash() >> Flag-1" )
!
    C = 0.0_DFP
!
SELECT CASE( SIZE( C, 1 ) )
    CASE( 6 )
            C ( 1, 1 ) = d2 * Sigma( 1, 1 )
            !C ( 1, 2 ) = C ( 1, 2 ) - 0.0_DFP
            !C ( 1, 3 ) = C ( 1, 3 ) - 0.0_DFP
            C ( 1, 4 ) = Sigma( 1, 2 )
            !C ( 1, 5 ) = C ( 1, 5 ) - 0.0_DFP
            C ( 1, 6 ) = Sigma( 1, 3 )

            !C ( 2, 1 ) = C ( 2, 1 ) - 0.0_DFP
            C ( 2, 2 ) = d2 * Sigma( 2, 2 )
            !C ( 2, 3 ) = C ( 2, 3 ) - 0.0_DFP
            C ( 2, 4 ) = Sigma( 2, 1 )
            C ( 2, 5 ) = Sigma( 2, 3 )
            !C ( 2, 6 ) = C ( 2, 6 ) - 0.0_DFP

            !C ( 3, 1 ) = C ( 3, 1 ) - 0.0_DFP
            !C ( 3, 2 ) = C ( 3, 2 ) - 0.0_DFP
            C ( 3, 3 ) = d2 * Sigma( 3, 3 )
            !C ( 3, 4 ) = C ( 3, 4 ) - 0.0_DFP
            C ( 3, 5 ) = Sigma( 2, 3 )
            C ( 3, 6 ) = Sigma( 1, 3 )

            C ( 4, 1 ) = Sigma( 1, 2 )
            C ( 4, 2 ) = Sigma( 1, 2 )
            !C ( 4, 3 ) = C ( 4, 3 ) - 0.0_DFP
            C ( 4, 4 ) = pt5 * Sigma( 1, 1 ) + pt5 * Sigma( 2, 2 )
            C ( 4, 5 ) = pt5 * Sigma( 1, 3 )
            C ( 4, 6 ) = pt5 * Sigma( 2, 3 )

            !C ( 5, 1 ) = C ( 5, 1 ) - 0.0_DFP
            C ( 5, 2 ) = Sigma( 2, 3 )
            C ( 5, 3 ) = Sigma( 2, 3 )
            C ( 5, 4 ) = pt5 * Sigma( 1, 3 )
            C ( 5, 5 ) = pt5 * Sigma( 2, 2 ) + pt5 * Sigma( 3, 3 )
            C ( 5, 6 ) = pt5 * Sigma( 2, 1 )


            C ( 6, 1 ) = Sigma( 1, 3 )
            !C ( 6, 2 ) = C ( 6, 2 ) - 0.0_DFP
            C ( 6, 3 ) = Sigma( 1, 3 )
            C ( 6, 4 ) = pt5 * Sigma( 2, 3 )
            C ( 6, 5 ) = pt5 * Sigma( 2, 1 )
            C ( 6, 6 ) = pt5 * Sigma( 1, 1 ) + pt5 * Sigma( 3, 3 )

    CASE( 4 )

            C ( 1, 1 ) = d2 * Sigma( 1, 1 )
            !C ( 1, 2 ) = C ( 1, 2 ) - 0.0_DFP
            C ( 1, 3 ) = Sigma( 1, 2 )
            !C ( 1, 4 ) = C ( 1, 4 ) - 0.0_DFP

            !C ( 2, 1 ) = C ( 2, 1 ) - 0.0_DFP
            C ( 2, 2 ) = d2 * Sigma( 2, 2 )
            C ( 2, 3 ) = Sigma( 1, 2 )
            !C ( 2, 4 ) = C ( 2, 4 ) - 0.0_DFP

            C ( 3, 1 ) = Sigma( 1, 2 )
            C ( 3, 2 ) = Sigma( 1, 2 )
            C ( 3, 3 ) = pt5 * Sigma( 1, 1 ) + pt5 * Sigma( 2, 2 )
            !C ( 3, 4 ) = C ( 3, 4 ) - 0.0_DFP

            !C ( 4, 1 ) = C ( 4, 1 ) - 0.0_DFP
            !C ( 4, 2 ) = C ( 4, 2 ) - 0.0_DFP
            !C ( 4, 3 ) = C ( 4, 3 ) - 0.0_DFP
            IF ( SIZE( Sigma, 1 ) .EQ. 3 ) THEN
                C ( 4, 4 ) = d2 * Sigma( 3, 3 )
            END IF

    CASE ( 1 )
            C ( 1, 1 ) = d2 * Sigma( 1, 1 )
! Flag-2
    CASE DEFAULT
        CALL Err_Msg( "Utility>>Tensor.F90>>getCDash.part", &
        "getCDash(), Flag-2", " Unknown Shape of C matrix " )
 END SELECT
!
 DEALLOCATE( Sigma )
!
 END SUBROUTINE getCDash
!
!------------------------------------------------------------------------------
!                                                            getCSigmaTruesdell
!------------------------------------------------------------------------------
!
