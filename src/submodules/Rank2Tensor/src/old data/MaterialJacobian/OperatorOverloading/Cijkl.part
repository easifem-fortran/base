!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Cijkl.part
!                   Last Update :   Dec-30-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Operators to access the Obj%C are defined
!       -   .Cijkl.
!       -   .AT.
!   HOSTING FILE
!       -   MaterialJacobian_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                                    Cijkl_1
!------------------------------------------------------------------------------

 FUNCTION Cijkl_1( Obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Operator .Cijkl. , Mat = .Cijkl. Obj returns Obj%C
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: Obj
    REAL( DFP ), ALLOCATABLE :: Cijkl_1( :, : )

    IF( .NOT. ALLOCATED( Obj%C ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " .Cijkl. Obj", &
        "Obj%C is not allocated, Program Stopped!!!"&
        )

        STOP

    END IF

    IF( ALLOCATED( Cijkl_1 ) ) DEALLOCATE( Cijkl_1 )
    Cijkl_1 = Obj%C

 END FUNCTION Cijkl_1

!------------------------------------------------------------------------------
!                                                                    Cijkl_2
!------------------------------------------------------------------------------

 FUNCTION Cijkl_2( Obj, Indx )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .Cijkl. Indx, Returns Obj%C( Indx( 1 ), Obj%C( Indx( 2 )) )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: Indx( 2 )
    REAL( DFP ) :: Cijkl_2

    INTEGER( I4B ) :: N

    IF( .NOT. ALLOCATED( Obj%C ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " Obj .Cijkl. Index", &
        "Obj%C is not allocated, Program Stopped!!!"&
        )

        STOP

    END IF

    N = .SIZE. Obj

    IF( ANY( Indx .GT. N ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " Obj .Cijkl. Index", &
        "Indx is out of bound, Program Stopped!!!"&
        )

        STOP

    END IF

    Cijkl_2 = Obj%C( Indx( 1 ), Indx( 2 ) )

 END FUNCTION Cijkl_2

!------------------------------------------------------------------------------
!                                                                    Cijkl_4
!------------------------------------------------------------------------------

 FUNCTION Cijkl_4( Obj, Indx )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .Cijkl. Indx, Returns Obj%C( Indx( 1 ), Obj%C( Indx( 2 )) )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: Indx( 4 )
    REAL( DFP ) :: Cijkl_4

    INTEGER( I4B ) :: NSD, N, i, j, k, l
    INTEGER( I4B ), ALLOCATABLE :: IndxMat( :, : )
    REAL( DFP ), ALLOCATABLE :: C( :, : )

    IF( .NOT. ALLOCATED( Obj%C ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " Obj .Cijkl. Index", &
        "Obj%C is not allocated, Program Stopped!!!"&
        )

        STOP

    END IF

    N = .SIZE. Obj

    NSD = 3

    IF( ANY( Indx .GT. NSD ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " Obj .Cijkl. Index", &
        "Indx should be less than NSD = 3, Program Stopped!!!"&
        )

        STOP

    END IF

    ALLOCATE( IndxMat( NSD, NSD ) )

    IndxMat( 1, 1 ) = 1
    IndxMat( 2, 2 ) = 2
    IndxMat( 3, 3 ) = 3
    IndxMat( 1, 2 ) = 4
    IndxMat( 2, 1 ) = 4
    IndxMat( 2, 3 ) = 5
    IndxMat( 3, 2 ) = 5
    IndxMat( 1, 3 ) = 6
    IndxMat( 3, 1 ) = 6

    i = Indx( 1 )
    j = Indx( 2 )
    k = Indx( 3 )
    l = Indx( 4 )

    SELECT CASE( N )

        CASE( 6 )

            Cijkl_4 = Obj%C( IndxMat( i, j ), IndxMat( k, l ) )

        CASE( 4 )

            C = Mat6_From_Mat4( Obj%C )
            Cijkl_4 = C( IndxMat( i, j ), IndxMat( k, l ) )

        CASE( 3 )

            C = Mat6_From_Mat3( Obj%C )
            Cijkl_4 = C( IndxMat( i, j ), IndxMat( k, l ) )

        CASE( 2 )

            C = Mat6_From_Mat2( Obj%C )
            Cijkl_4 = C( IndxMat( i, j ), IndxMat( k, l ) )


        CASE( 1 )
            C = Mat6_From_Mat1( Obj%C )
            Cijkl_4 = C( IndxMat( i, j ), IndxMat( k, l ) )

        CASE DEFAULT

            CALL Err_Msg( &
            "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
            " Obj .Cijkl. Index", &
            "No Case Found for shape of Stored Obj%C, Program Stopped!!!"&
            )
            STOP

    END SELECT


    IF( ALLOCATED( C ) ) DEALLOCATE( C )
    IF( ALLOCATED( IndxMat ) ) DEALLOCATE( IndxMat )

 END FUNCTION Cijkl_4

!------------------------------------------------------------------------------
!                                                                       Cijkl
!------------------------------------------------------------------------------

 FUNCTION Cijkl( Obj, Indx )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .Cijkl. Indx, Returns Obj%C( Indx( 1 ), Obj%C( Indx( 2 )) )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: Indx( : )
    REAL( DFP ) :: Cijkl

    SELECT CASE( SIZE( Indx ) )

        CASE( 2 )

            Cijkl = Cijkl_2( Obj, Indx )

        CASE( 4 )

            Cijkl = Cijkl_4( Obj, Indx )

        CASE DEFAULT

            Cijkl = 0.0_DFP

    END SELECT

 END FUNCTION Cijkl

!------------------------------------------------------------------------------
!                                                                    Cijkl_5
!------------------------------------------------------------------------------

 FUNCTION Cijkl_5( Obj, M )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .Cijkl. Indx, Returns Obj%C( Indx( 1 ), Obj%C( Indx( 2 )) )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: M
    REAL( DFP ) :: Cijkl_5( M , M )

    INTEGER( I4B ) :: N

    IF( .NOT. ALLOCATED( Obj%C ) ) THEN

        CALL Err_Msg( &
        "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
        " Obj .Cijkl. Index", &
        "Obj%C is not allocated, Program Stopped!!!"&
        )

        STOP

    END IF

    N = .SIZE. Obj

    SELECT CASE( N )

        CASE( 6 )

            SELECT CASE( M )

                CASE( 6 )

                    Cijkl_5 = Obj%C

                CASE( 4 )

                    Cijkl_5 = Mat4_From_Mat6( Obj%C )

                CASE( 3 )

                    Cijkl_5 = Mat3_From_Mat6( Obj%C )

                CASE( 2 )

                    Cijkl_5 = Mat2_From_Mat6( Obj%C )

                CASE( 1 )

                    Cijkl_5( 1, 1 ) = Obj%C( 1, 1 )


            END SELECT

        CASE( 4 )

            SELECT CASE( M )

                CASE( 6 )

                    Cijkl_5 = Mat6_From_Mat4( Obj%C )

                CASE( 4 )

                    Cijkl_5 =  Obj%C

                CASE( 3 )

                    Cijkl_5 = Mat3_From_Mat4( Obj%C )

                CASE( 2 )

                    Cijkl_5 = Mat2_From_Mat4( Obj%C )

                CASE( 1 )

                    Cijkl_5( 1, 1 ) = Obj%C( 1, 1 )


            END SELECT

        CASE( 3 )

            SELECT CASE( M )

                CASE( 6 )

                    Cijkl_5 = Mat6_From_Mat3( Obj%C )

                CASE( 4 )

                    Cijkl_5 =  Mat4_From_Mat3( Obj%C )

                CASE( 3 )

                    Cijkl_5 = Obj%C

                CASE( 2 )

                    Cijkl_5 = Mat2_From_Mat3( Obj%C )

                CASE( 1 )

                    Cijkl_5( 1, 1 ) = Obj%C( 1, 1 )


            END SELECT

        CASE( 2 )

            SELECT CASE( M )

                CASE( 6 )

                    Cijkl_5 = Mat6_From_Mat2( Obj%C )

                CASE( 4 )

                    Cijkl_5 =  Mat4_From_Mat2( Obj%C )

                CASE( 3 )

                    Cijkl_5 = Mat3_From_Mat2( Obj%C )

                CASE( 2 )

                    Cijkl_5 = Obj%C

                CASE( 1 )

                    Cijkl_5( 1, 1 ) = Obj%C( 1, 1 )


            END SELECT

        CASE( 1 )

            SELECT CASE( M )

                CASE( 6 )

                    Cijkl_5 = Mat6_From_Mat1( Obj%C )

                CASE( 4 )

                    Cijkl_5 =  Mat4_From_Mat1( Obj%C )

                CASE( 3 )

                    Cijkl_5 = Mat3_From_Mat1( Obj%C )

                CASE( 2 )

                    Cijkl_5 = Mat2_From_Mat1( Obj%C )

                CASE( 1 )

                    Cijkl_5( 1, 1 ) = Obj%C( 1, 1 )


            END SELECT

        CASE DEFAULT

            CALL Err_Msg( &
            "MaterialJacobian_Class.f90>>OperatorOverloading/Cijkl.part", &
            " Obj .Cijkl. Index", &
            "No Case Found for shape of Stored Obj%C, Program Stopped!!!"&
            )
            STOP

    END SELECT

 END FUNCTION Cijkl_5