!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Contraction.part
!                   Last Update :   Dec-30-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Contraction Operator is defined for Material Jacobian and
!           tensor
!   HOSTING FILE
!       -   MaterialJacobian_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                       Contraction_1
!------------------------------------------------------------------------------

 FUNCTION Contraction_1( obj, Tensorobj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  obj .Contraction. Tensor
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class
    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    REAL( DFP ) :: Contraction_1( 3, 3 )

    ! Define intent of dummy variables
    REAL( DFP ), ALLOCATABLE :: Vec( : )

    CALL Tensorobj%getTensor( Vec, "Strain" )
    Vec = MATMUL( obj .Cijkl. SIZE(Vec), Vec )
    Contraction_1 = MatFromVoigtVec( Vec, "Stress" )
    DEALLOCATE( Vec )

 END FUNCTION Contraction_1

!------------------------------------------------------------------------------
!                                                       Contraction_2
!------------------------------------------------------------------------------

 FUNCTION Contraction_2( Tensorobj, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  Tensor .Contraction. obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class
    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    REAL( DFP ) :: Contraction_2( 3, 3 )

    ! Define intent of dummy variables
    REAL( DFP ), ALLOCATABLE :: Vec( : )

    CALL Tensorobj%getTensor( Vec, "Strain" )
    Vec = MATMUL( TRANSPOSE( obj .Cijkl. SIZE( Vec ) ), Vec )
    Contraction_2 = MatFromVoigtVec( Vec, "Stress" )
    DEALLOCATE( Vec )

 END FUNCTION Contraction_2

!------------------------------------------------------------------------------
!                                                                Contraction_3
!------------------------------------------------------------------------------

 FUNCTION Contraction_3( obj, Mat )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  obj .Contraction. Mat
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class
    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: obj
    REAL( DFP ), INTENT( IN ) :: Mat( :, : )
    REAL( DFP ) :: Contraction_3( 3, 3 )

    ! Define intent of dummy variables
    TYPE( Rank2Tensor_ ) :: Tensorobj

    Tensorobj = Mat
    Contraction_3 = Contraction_1( obj, Tensorobj )
    CALL Tensorobj%DeallocateData( )

 END FUNCTION Contraction_3

!------------------------------------------------------------------------------
!                                                               Contraction_4
!------------------------------------------------------------------------------

 FUNCTION Contraction_4( Mat, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  Mat .Contraction. obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class
    USE Voigt

    ! Define intent of dummy variables
    CLASS( MaterialJacobian_ ), INTENT( IN ) :: obj
    REAL( DFP ), INTENT( IN ) :: Mat( :, : )
    REAL( DFP ) :: Contraction_4( 3, 3 )

    ! Define intent of dummy variables
    TYPE( Rank2Tensor_ ) :: Tensorobj

    Tensorobj = Mat
    Contraction_4 = Contraction_2( Tensorobj, obj )
    CALL Tensorobj%DeallocateData( )

 END FUNCTION Contraction_4