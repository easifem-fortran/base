!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Constructor.part
!                   Last Update :   Dec-17-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Deformation Gradient class is defined
!   HOSTING FILE
!       -   Stress_Class.F90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                               Deallocate
!------------------------------------------------------------------------------

 SUBROUTINE Deallocate( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Deallocate the data
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    IF( ALLOCATED( obj%V ) ) DEALLOCATE( obj%V )

 END SUBROUTINE Deallocate

!------------------------------------------------------------------------------
!                                                                  isInitiated
!------------------------------------------------------------------------------

 LOGICAL( LGT ) FUNCTION isInitiated( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Tensor Class
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    isInitiated = .FALSE.

    IF( ALLOCATED( obj%V ) ) THEN
        isInitiated = .TRUE.
    END IF

 END FUNCTION isInitiated

!------------------------------------------------------------------------------
!                                                                     getNSD
!------------------------------------------------------------------------------

 INTEGER( I4B ) FUNCTION getNSD( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Tensor Class
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    getNSD = obj%NSD

 END FUNCTION getNSD

!------------------------------------------------------------------------------
!                                                                     getVoigtLen
!------------------------------------------------------------------------------

 INTEGER( I4B ) FUNCTION getVoigtLen( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Tensor Class
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    IF( ALLOCATED( obj%V ) ) THEN

        getVoigtLen = SIZE( obj%V )

    ELSE

        CALL Err_Msg( &
        "Stress_Class.F90>>Constructor.part", &
        ".Size. obj", &
        "obj%V is not allocated, Program Stopped!!!"&
        )

        STOP

    END IF

 END FUNCTION getVoigtLen

!------------------------------------------------------------------------------
!                                                                      getNSD
!------------------------------------------------------------------------------

 SUBROUTINE setNSD( obj, NSD )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Tensor Class
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    INTEGER( I4B ), INTENT( IN ) :: NSD

    obj%NSD = NSD

 END SUBROUTINE setNSD

!------------------------------------------------------------------------------
!                                                                    Initiate1
!------------------------------------------------------------------------------

 SUBROUTINE Initiate1( obj, Vec, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    ! Define internal variables
    INTEGER( I4B ) :: N

    N = SIZE( Vec )
    IF( ALLOCATED( obj%V ) ) DEALLOCATE( obj%V )
    ALLOCATE( obj%V( N ) )

    obj%V = Vec

    obj%StressType = TRIM( StressType )

    SELECT CASE( N )

        CASE( 1 )
            obj%NSD = 1
        CASE( 3 )
            obj%NSD = 2
        CASE( 4 )
            obj%NSD = 2
        CASE( 6 )
            obj%NSD = 3

    END SELECT

 END SUBROUTINE Initiate1

!------------------------------------------------------------------------------
!                                                                    Initiate2
!------------------------------------------------------------------------------

 SUBROUTINE Initiate2( obj, Mat, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Matrix
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen

    ! Define internal variable
    REAL( DFP ), ALLOCATABLE :: Vec( : )

    Vec = VoigtVec( Mat, VoigtLen, "Stress")

    CALL Check_Error( &
    "Stress_Class.F90>>Constructor.F90>>Initiate()", &
    "Traceback ---> obj%V = VoigtVec( Mat, VoigtLen,'Stress') " )

    CALL obj%Initiate1( Vec = Vec, StressType = StressType )

    DEALLOCATE( Vec )

 END SUBROUTINE Initiate2

!------------------------------------------------------------------------------
!                                                                    Initiate3
!------------------------------------------------------------------------------

 SUBROUTINE Initiate3( obj, obj2 )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj Stress obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    CLASS( Stress_ ), INTENT( IN ) :: obj2


    IF( ALLOCATED( obj%V ) ) DEALLOCATE( obj%V )

    IF( ALLOCATED( obj2%V ) ) THEN

        obj%V = obj2%V

    END IF

    obj%StressType = TRIM( obj2%StressType )
    obj%NSD = obj2%NSD

 END SUBROUTINE Initiate3

!------------------------------------------------------------------------------
!                                                                    Initiate4
!------------------------------------------------------------------------------

 SUBROUTINE Initiate4( obj, Tensorobj, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Rank2Tensor object
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    REAL( DFP ), ALLOCATABLE :: Mat( :, : )

    Mat = Tensorobj

    CALL obj%Initiate2( Mat = Mat, VoigtLen = VoigtLen, &
    StressType = StressType )

    DEALLOCATE( Mat )

 END SUBROUTINE Initiate4

!------------------------------------------------------------------------------
!                                                                    Initiate5
!------------------------------------------------------------------------------

 SUBROUTINE Initiate5( obj, Mat, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Matrix
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL obj%Initiate2( &
                         Mat = Mat, &
                         VoigtLen = 6, &
                         StressType = StressType &
                        )

 END SUBROUTINE Initiate5

!------------------------------------------------------------------------------
!                                                                    Initiate6
!------------------------------------------------------------------------------

 SUBROUTINE Initiate6( obj, Tensorobj, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Rank2Tensor object
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( INOUT ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL obj%Initiate4( &
                         Tensorobj = Tensorobj, &
                         VoigtLen = 6, &
                         StressType = StressType &
                        )

 END SUBROUTINE Initiate6

!------------------------------------------------------------------------------
!                                                                 Constructor_1
!------------------------------------------------------------------------------

 FUNCTION Constructor_1( Vec, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_1
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    ALLOCATE( Stress_ :: Constructor_1 )

    CALL Constructor_1%Initiate( Vec = Vec, StressType = StressType )

 END FUNCTION Constructor_1

!------------------------------------------------------------------------------
!                                                                 Constructor_2
!------------------------------------------------------------------------------

 FUNCTION Constructor_2( Mat, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_2
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen

    ALLOCATE( Stress_ :: Constructor_2 )

    CALL Constructor_2%Initiate( Mat = Mat, &
    VoigtLen = VoigtLen, StressType = StressType )

 END FUNCTION Constructor_2

!------------------------------------------------------------------------------
!                                                                 Constructor_3
!------------------------------------------------------------------------------

 FUNCTION Constructor_3( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_3
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ALLOCATE( Stress_ :: Constructor_3 )

    CALL Constructor_3%Initiate( obj )

 END FUNCTION Constructor_3

!------------------------------------------------------------------------------
!                                                                 Constructor_4
!------------------------------------------------------------------------------

 FUNCTION Constructor_4( Tensorobj, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_4
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    ALLOCATE( Stress_ :: Constructor_4 )

    CALL Constructor_4%Initiate( Tensorobj = Tensorobj, &
    VoigtLen = VoigtLen, StressType = StressType )

 END FUNCTION Constructor_4

!------------------------------------------------------------------------------
!                                                                 Constructor_5
!------------------------------------------------------------------------------

 FUNCTION Constructor_5( Mat, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_5
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    ALLOCATE( Stress_ :: Constructor_5 )

    CALL Constructor_5%Initiate( Mat = Mat, StressType = StressType )

 END FUNCTION Constructor_5

!------------------------------------------------------------------------------
!                                                                 Constructor_6
!------------------------------------------------------------------------------

 FUNCTION Constructor_6( Tensorobj, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), POINTER :: Constructor_6
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    ALLOCATE( Stress_ :: Constructor_6 )

    CALL Constructor_6%Initiate( &
        Tensorobj = Tensorobj, &
        StressType = StressType &
        )

 END FUNCTION Constructor_6

!------------------------------------------------------------------------------
!                                                                 Constructor1
!------------------------------------------------------------------------------

 FUNCTION Constructor1( Vec, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor1
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL Constructor1%Initiate( Vec = Vec, StressType = StressType )

 END FUNCTION Constructor1

!------------------------------------------------------------------------------
!                                                                 Constructor2
!------------------------------------------------------------------------------

 FUNCTION Constructor2( Mat, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor2
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen

    CALL Constructor2%Initiate( Mat = Mat, &
    VoigtLen = VoigtLen, StressType = StressType )

 END FUNCTION Constructor2

!------------------------------------------------------------------------------
!                                                                 Constructor3
!------------------------------------------------------------------------------

 FUNCTION Constructor3( obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor3
    CLASS( Stress_ ), INTENT( IN ) :: obj

    CALL Constructor3%Initiate( obj )

 END FUNCTION Constructor3

!------------------------------------------------------------------------------
!                                                                 Constructor4
!------------------------------------------------------------------------------

 FUNCTION Constructor4( Tensorobj, VoigtLen, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor4
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    INTEGER( I4B ), INTENT( IN ) :: VoigtLen
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL Constructor4%Initiate( Tensorobj = Tensorobj, &
    VoigtLen = VoigtLen, StressType = StressType )

 END FUNCTION Constructor4

!------------------------------------------------------------------------------
!                                                                 Constructor5
!------------------------------------------------------------------------------

 FUNCTION Constructor5( Mat, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor5
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL Constructor5%Initiate( &
        Mat = Mat, &
        StressType = StressType &
        )

 END FUNCTION Constructor5

!------------------------------------------------------------------------------
!                                                                 Constructor6
!------------------------------------------------------------------------------

 FUNCTION Constructor6( Tensorobj, StressType )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Initiate obj using Voigt vector
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    TYPE( Stress_ ) :: Constructor6
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    CHARACTER( LEN = * ), INTENT( IN ) :: StressType

    CALL Constructor6%Initiate( &
        Tensorobj = Tensorobj, &
        StressType = StressType &
    )

 END FUNCTION Constructor6
