!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Invariants.part
!                   Last Update :   Dec-18-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   Type:: Part of module
!
!   Info::  -   This part contains the subroutines related to
!               the tensor invariants.

!   Hosting File -  Stress_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                                  Invar_I1
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_I1( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1. - Returns the trace of a tensor
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless
    TYPE( Rank2Tensor_ ) :: T

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
        "Stress_Class.f90>>Invariant.part", &
        "Invar_I1()", &
        "Stress_ object is not allocated. &
        Program Stopped !!!")

        STOP

    END IF

    T = obj
    Invar_I1 = Trace( T )
    CALL T%DeallocateData( )

 END FUNCTION Invar_I1

!------------------------------------------------------------------------------
!                                                                  Invar_I2
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_I2( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1. - Returns I2 invariant
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
        "Stress_Class.f90>>Invariant.part", &
        "Invar_I2()", &
        "Stress_ object is not allocated. &
        Program Stopped !!!")

        STOP

    END IF

    T = obj
    Invar_I2 = Invariant_I2( T )
    CALL T%DeallocateData( )

 END FUNCTION Invar_I2

!------------------------------------------------------------------------------
!                                                                  Invar_I3
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_I3( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Returns I3 invariant
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
        "Stress_Class.f90>>Invariant.part", &
        "Invar_I3()", &
        "Stress_ object is not allocated. &
        Program Stopped !!!")

        STOP

    END IF

    T = obj
    Invar_I3 = Invariant_I3( T )
    CALL T%DeallocateData( )

 END FUNCTION Invar_I3

!------------------------------------------------------------------------------
!                                                                  Invar_J2
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_J2( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Returns J2 = 0.5*Dev( Sigma )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
        "Stress_Class.f90>>Invariant.part", &
        "Invar_J2()", &
        "Stress_ object is not allocated. &
        Program Stopped !!!")

        STOP

    END IF

    T = obj
    Invar_J2 = Invariant_J2( T )
    CALL T%DeallocateData( )

 END FUNCTION Invar_J2

!------------------------------------------------------------------------------
!                                                                  Invar_J3
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_J3( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Returns  Det( Dev( Sigma ))
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
        "Stress_Class.f90>>Invariant.part", &
        "Invar_J3()", &
        "Stress_ object is not allocated. &
        Program Stopped !!!")

        STOP

    END IF

    T = obj
    Invar_J3 = Invariant_J3( T )
    CALL T%DeallocateData( )

 END FUNCTION Invar_J3

!------------------------------------------------------------------------------
!                                                                    Sigma_m
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Sigma_m( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Returns  Det( Dev( Sigma ))
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless

    Sigma_m = Invar_I1( obj ) / 3.0_DFP

 END FUNCTION Sigma_m

!------------------------------------------------------------------------------
!                                                              Sigma_Bar
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Sigma_Bar( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Sigma_Bar = SQRT( 3 * J2 )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless

    Sigma_Bar = SQRT( Invar_J2( obj ) * 3.0_DFP )

 END FUNCTION Sigma_Bar

!------------------------------------------------------------------------------
!                                                                     Invar_Z
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_Z( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Invar_Z = Sigma_m / SQRT( 3  )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless

    Invar_Z = Sigma_m( obj ) / SQRT( 3.0_DFP )

 END FUNCTION Invar_Z

!------------------------------------------------------------------------------
!                                                                     Invar_r
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_r( obj )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Invar_r = SQRT( 2 * J2 )
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    ! Define internal variabless

    Invar_r = SQRT( 2.0_DFP * Invar_J2( obj ) )

 END FUNCTION Invar_r

!------------------------------------------------------------------------------
!                                                              m_Invar_LodeAngle
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION m_Invar_LodeAngle( obj, LodeAngleType )

    USE Rank2Tensor_Class

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  LodeAngleType "Sine", "Cosine"
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    CHARACTER( LEN = * ), INTENT( IN ) :: LodeAngleType

    TYPE( Rank2Tensor_ ) :: T

!   Check the existence of obj
    T = obj
    m_Invar_LodeAngle = LodeAngle( T, LodeAngleType )

    CALL T%DeallocateData( )

 END FUNCTION m_Invar_LodeAngle

!------------------------------------------------------------------------------
!                                                              Invar_LodeAngle
!------------------------------------------------------------------------------

 REAL( DFP ) FUNCTION Invar_LodeAngle( obj )

!   Description
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  In this case Lode angle is "Sine" type.
!           This method will be used for defining the operator
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define Intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj

    Invar_LodeAngle = m_Invar_LodeAngle( obj, "Sine" )

 END FUNCTION Invar_LodeAngle





