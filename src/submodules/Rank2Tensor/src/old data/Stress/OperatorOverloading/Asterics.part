!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Asterics.part
!                   Last Update :   Dec-13-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION ::
!       -   Tensor class is defined
!   HOSTING FILE
!       -   Stress_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                          ObjTimesScalar_1
!------------------------------------------------------------------------------

 FUNCTION ObjTimesScalar_1( Obj, Scalar )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!           Obj * Scalar
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesScalar_1

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg(   &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Real", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ObjTimesScalar_1 = MatFromVoigtVec(Obj % V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ObjTimesScalar_1 = MatFromVoigtVec(Obj % V * Scalar,")

 END FUNCTION ObjTimesScalar_1

!------------------------------------------------------------------------------
!                                                            ScalarTimesObj_1
!------------------------------------------------------------------------------

 FUNCTION ScalarTimesObj_1( Scalar, Obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!           Scalar*Obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ScalarTimesObj_1

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN 

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Real * Obj",&
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ScalarTimesObj_1 = MatFromVoigtVec(Obj % V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ScalarTimesObj_1 = MatFromVoigtVec(Obj % V * Scalar,")

 END FUNCTION ScalarTimesObj_1
!
!------------------------------------------------------------------------------
!                                                          ObjTimesScalar_2
!------------------------------------------------------------------------------
!
 FUNCTION ObjTimesScalar_2( Obj, Scalar )
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesScalar_2

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN 

        CALL Err_Msg(   &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Integer", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ObjTimesScalar_2 = MatFromVoigtVec(Obj % V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ObjTimesScalar_2 = MatFromVoigtVec(Obj % V * Scalar,")

 END FUNCTION ObjTimesScalar_2

!------------------------------------------------------------------------------
!                                                          ScalarTimesObj_2
!------------------------------------------------------------------------------

 FUNCTION ScalarTimesObj_2( Scalar, Obj )
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    INTEGER( I4B ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ScalarTimesObj_2

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN 

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "Integer * Obj", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ScalarTimesObj_2 = MatFromVoigtVec(Obj % V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ScalarTimesObj_2 = MatFromVoigtVec(Obj % V * Scalar,")

 END FUNCTION ScalarTimesObj_2

!------------------------------------------------------------------------------
!                                                          ObjTimesObj
!------------------------------------------------------------------------------

 FUNCTION ObjTimesObj( Obj, Obj2 )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Obj % V * Obj % V
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj, Obj2
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesObj

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) &
        .OR. .NOT. ALLOCATED( Obj2 % V ) ) THEN 

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Obj", &
                        "Stress_ Obj is/are not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    IF( SIZE( Obj % V ) .NE. SIZE( Obj2 % V ) ) THEN 

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Obj2 ", &
                        "The size of Obj % V and Obj2 % V must be the same. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ObjTimesObj = MatFromVoigtVec( Obj % V * Obj2 % V, "Stress" )

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ObjTimesObj = MatFromVoigtVec( Obj % V * Obj2 % V,")

 END FUNCTION ObjTimesObj

!------------------------------------------------------------------------------
!                                                               ObjTimesMat
!------------------------------------------------------------------------------

 FUNCTION ObjTimesMat( Obj, Mat )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Obj * Mat
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesMat

    ! Define internal variables
    INTEGER( I4B ) :: m, n

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN 

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Mat", &
                        "Stress_ Obj not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    m = SIZE( Mat, 1 )

    IF( SIZE( Mat, 2 ) .NE. m .OR. m .GT. 3 ) THEN 

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Mat", &
                        "Mat should be a square matrix of shape &
                        (3,3), (2,2), (1,1). &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ObjTimesMat = MatFromVoigtVec( Obj % V, "Stress" )

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>Obj*Scalar", &
    "Traceback ---> &
    ObjTimesMat = MatFromVoigtVec( Obj % V,")

    n = MIN( m, 3 )

    ObjTimesMat( 1:n, 1:n )  = ObjTimesMat( 1:n, 1:n )  * Mat( 1:n, 1:n )

 END FUNCTION ObjTimesMat

!------------------------------------------------------------------------------
!                                                               MatTimesObj
!------------------------------------------------------------------------------

 FUNCTION MatTimesObj( Mat, Obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Mat * obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 3, 3 ) :: MatTimesObj

    MatTimesObj = ObjTimesMat( Obj, Mat )

 END FUNCTION MatTimesObj

!------------------------------------------------------------------------------
!                                                               ObjTimesTensor
!------------------------------------------------------------------------------

 FUNCTION ObjTimesTensor( Obj, TensorObj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Obj * TensorObj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: TensorObj
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesTensor

    REAL( DFP ), ALLOCATABLE :: Mat( :, : )

    Mat = TensorObj

    ObjTimesTensor = ObjTimesMat( Obj, Mat )

    DEALLOCATE( Mat )

 END FUNCTION ObjTimesTensor

!------------------------------------------------------------------------------
!                                                               TensorTimesObj
!------------------------------------------------------------------------------

 FUNCTION TensorTimesObj( TensorObj, Obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Obj * TensorObj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: TensorObj
    REAL( DFP ), DIMENSION( 3, 3 ) :: TensorTimesObj

    REAL( DFP ), ALLOCATABLE :: Mat( :, : )

    Mat = TensorObj

    TensorTimesObj = ObjTimesMat( Obj, Mat )

    DEALLOCATE( Mat )

 END FUNCTION TensorTimesObj

!------------------------------------------------------------------------------
!                                                              ObjTimesVector
!------------------------------------------------------------------------------

 FUNCTION ObjTimesVector( Obj, Vec )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Obj * VoigtVec
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 3, 3 ) :: ObjTimesVector

    ! Define internal variables
    INTEGER( I4B ) :: m
    REAL( DFP ) :: DummyVec( 6 )

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Vector", &
                        "Stress_ Obj is not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    m = SIZE( Vec )

    IF( m .GT. 6 ) THEN 

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Obj * Vector", &
                        "The Length of Vec should be less than or equal to 6. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP 

    END IF

    DummyVec = 1.0_DFP
    DummyVec( 1 : m ) = Vec( 1 : m )

    ObjTimesVector = ObjTimesMat( Obj, MatFromVoigtVec( DummyVec, "Stress" ) )

 END FUNCTION ObjTimesVector

!------------------------------------------------------------------------------
!                                                            VectorTimesObj
!------------------------------------------------------------------------------

 FUNCTION VectorTimesObj( Vec, Obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       VoigtVec * obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 3, 3 ) :: VectorTimesObj

    ! Define internal variables

    VectorTimesObj = ObjTimesVector( Obj, Vec )

 END FUNCTION VectorTimesObj
