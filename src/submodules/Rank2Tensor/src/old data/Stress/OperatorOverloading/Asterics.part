!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Asterics.part
!                   Last Update :   Dec-13-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION ::
!       -   Tensor class is defined
!   HOSTING FILE
!       -   Stress_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                          objTimesScalar_1
!------------------------------------------------------------------------------

 FUNCTION objTimesScalar_1( obj, Scalar )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!           obj * Scalar
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesScalar_1

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg(   &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Real", &
                        "Stress_ obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    objTimesScalar_1 = MatFromVoigtVec(obj%V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    objTimesScalar_1 = MatFromVoigtVec(obj%V * Scalar,")

 END FUNCTION objTimesScalar_1

!------------------------------------------------------------------------------
!                                                            ScalarTimesobj_1
!------------------------------------------------------------------------------

 FUNCTION ScalarTimesobj_1( Scalar, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!           Scalar*obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ScalarTimesobj_1

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "Real * obj",&
                        "Stress_ obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ScalarTimesobj_1 = MatFromVoigtVec(obj%V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    ScalarTimesobj_1 = MatFromVoigtVec(obj%V * Scalar,")

 END FUNCTION ScalarTimesobj_1
!
!------------------------------------------------------------------------------
!                                                          objTimesScalar_2
!------------------------------------------------------------------------------
!
 FUNCTION objTimesScalar_2( obj, Scalar )
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    INTEGER( I4B ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesScalar_2

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg(   &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Integer", &
                        "Stress_ obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    objTimesScalar_2 = MatFromVoigtVec(obj%V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    objTimesScalar_2 = MatFromVoigtVec(obj%V * Scalar,")

 END FUNCTION objTimesScalar_2

!------------------------------------------------------------------------------
!                                                          ScalarTimesobj_2
!------------------------------------------------------------------------------

 FUNCTION ScalarTimesobj_2( Scalar, obj )
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    INTEGER( I4B ), INTENT( IN ) :: Scalar
    REAL( DFP ), DIMENSION( 3, 3 ) :: ScalarTimesobj_2

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "Integer * obj", &
                        "Stress_ obj is not allocated. Program Stopped" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    ScalarTimesobj_2 = MatFromVoigtVec(obj%V * Scalar, "Stress")

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    ScalarTimesobj_2 = MatFromVoigtVec(obj%V * Scalar,")

 END FUNCTION ScalarTimesobj_2

!------------------------------------------------------------------------------
!                                                          objTimesobj
!------------------------------------------------------------------------------

 FUNCTION objTimesobj( obj, obj2 )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       obj%V * obj%V
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj, obj2
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesobj

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) &
        .OR. .NOT. ALLOCATED( obj2%V ) ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * obj", &
                        "Stress_ obj is/are not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    IF( SIZE( obj%V ) .NE. SIZE( obj2%V ) ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * obj2 ", &
                        "The size of obj%V and obj2%V must be the same. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    objTimesobj = MatFromVoigtVec( obj%V * obj2%V, "Stress" )

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    objTimesobj = MatFromVoigtVec( obj%V * obj2%V,")

 END FUNCTION objTimesobj

!------------------------------------------------------------------------------
!                                                               objTimesMat
!------------------------------------------------------------------------------

 FUNCTION objTimesMat( obj, Mat )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       obj * Mat
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesMat

    ! Define internal variables
    INTEGER( I4B ) :: m, n

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Mat", &
                        "Stress_ obj not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    m = SIZE( Mat, 1 )

    IF( SIZE( Mat, 2 ) .NE. m .OR. m .GT. 3 ) THEN

        CALL Err_Msg(  &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Mat", &
                        "Mat should be a square matrix of shape &
                        (3,3), (2,2), (1,1). &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    objTimesMat = MatFromVoigtVec( obj%V, "Stress" )

    CALL Check_Error( &
    "Stress_Class.f90>>Asterics.part>>obj*Scalar", &
    "Traceback ---> &
    objTimesMat = MatFromVoigtVec( obj%V,")

    n = MIN( m, 3 )

    objTimesMat( 1:n, 1:n )  = objTimesMat( 1:n, 1:n )  * Mat( 1:n, 1:n )

 END FUNCTION objTimesMat

!------------------------------------------------------------------------------
!                                                               MatTimesobj
!------------------------------------------------------------------------------

 FUNCTION MatTimesobj( Mat, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       Mat * obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 3, 3 ) :: MatTimesobj

    MatTimesobj = objTimesMat( obj, Mat )

 END FUNCTION MatTimesobj

!------------------------------------------------------------------------------
!                                                               objTimesTensor
!------------------------------------------------------------------------------

 FUNCTION objTimesTensor( obj, Tensorobj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       obj * Tensorobj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesTensor

    REAL( DFP ), ALLOCATABLE :: Mat( :, : )

    Mat = Tensorobj

    objTimesTensor = objTimesMat( obj, Mat )

    DEALLOCATE( Mat )

 END FUNCTION objTimesTensor

!------------------------------------------------------------------------------
!                                                               TensorTimesobj
!------------------------------------------------------------------------------

 FUNCTION TensorTimesobj( Tensorobj, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       obj * Tensorobj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Rank2Tensor_Class

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Tensorobj
    REAL( DFP ), DIMENSION( 3, 3 ) :: TensorTimesobj

    REAL( DFP ), ALLOCATABLE :: Mat( :, : )

    Mat = Tensorobj

    TensorTimesobj = objTimesMat( obj, Mat )

    DEALLOCATE( Mat )

 END FUNCTION TensorTimesobj

!------------------------------------------------------------------------------
!                                                              objTimesVector
!------------------------------------------------------------------------------

 FUNCTION objTimesVector( obj, Vec )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       obj * VoigtVec
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 3, 3 ) :: objTimesVector

    ! Define internal variables
    INTEGER( I4B ) :: m
    REAL( DFP ) :: DummyVec( 6 )

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( obj%V ) ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Vector", &
                        "Stress_ obj is not allocated. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    m = SIZE( Vec )

    IF( m .GT. 6 ) THEN

        CALL Err_Msg( &
                       "Stress_Class.f90>>Asterics.part", &
                        "obj * Vector", &
                        "The Length of Vec should be less than or equal to 6. &
                        Program Stopped !!!" &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    DummyVec = 1.0_DFP
    DummyVec( 1 : m ) = Vec( 1 : m )

    objTimesVector = objTimesMat( obj, MatFromVoigtVec( DummyVec, "Stress" ) )

 END FUNCTION objTimesVector

!------------------------------------------------------------------------------
!                                                            VectorTimesobj
!------------------------------------------------------------------------------

 FUNCTION VectorTimesobj( Vec, obj )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       VoigtVec * obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 3, 3 ) :: VectorTimesobj

    ! Define internal variables

    VectorTimesobj = objTimesVector( obj, Vec )

 END FUNCTION VectorTimesobj
