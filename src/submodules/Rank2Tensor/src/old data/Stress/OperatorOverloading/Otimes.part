!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Otimes.part
!                   Last Update :   Dec-18-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION ::
!       -   Dyadic product for stress class is defined
!   HOSTING FILE
!       -   Stress_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                              Obj_Otimes_Obj
!------------------------------------------------------------------------------

 FUNCTION Obj_Otimes_Obj( Obj, Obj2 )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .otimes. Obj2
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables

    CLASS( Stress_ ), INTENT( IN ) :: Obj, Obj2
    REAL( DFP ), DIMENSION( 6, 6 ) :: Obj_Otimes_Obj

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T1, T2

    IF( .NOT. ALLOCATED( Obj % V ) &
        .OR. .NOT. ALLOCATED( Obj2 % V ) ) THEN 

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Obj()", &
                        "Stress_ Obj is/are not allocated. Program Stopped"&
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    T1 = Obj
    T2 = Obj2

    Obj_Otimes_Obj = T1 .otimes. T2

    CALL T1 % DeallocateData( )
    CALL T2 % DeallocateData( )

 END FUNCTION Obj_Otimes_Obj

!------------------------------------------------------------------------------
!                                                            Obj_Otimes_Mat
!------------------------------------------------------------------------------

 FUNCTION Obj_Otimes_Mat( Obj, Mat )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .otimes. Mat
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 6, 6 ) :: Obj_Otimes_Mat

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T
    INTEGER( I4B ) :: N
    REAL ( DFP ) :: DummyMat( 3, 3 )

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Mat()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP
    END IF

    N = SIZE( Mat, 1 )

    IF( SIZE( Mat, 2 ) .NE. N .OR. N .GT. 3 ) THEN
        
        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Mat()", &
                        "Mat should be square matrix, &
                        and Size should be less than equal to 3, &
                        Program Stopped!!!" &
                    )
        STOP

    END IF

    DummyMat = 0.0_DFP
    DummyMat( 1:N, 1:N ) = Mat( 1:N, 1:N )

    T = Obj

    Obj_Otimes_Mat = T .Otimes. DummyMat

    CALL T % DeallocateData( )

 END FUNCTION Obj_Otimes_Mat

!------------------------------------------------------------------------------
!                                                            Mat_Otimes_Obj
!------------------------------------------------------------------------------

 FUNCTION Mat_Otimes_Obj( Mat, Obj )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Mat .otimes. Obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables

    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( 6, 6 ) :: Mat_Otimes_Obj

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T
    INTEGER( I4B ) :: N
    REAL ( DFP ) :: DummyMat( 3, 3 )

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Mat_Otimes_Obj()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP
    END IF

    N = SIZE( Mat, 1 )

    IF( SIZE( Mat, 2 ) .NE. N .OR. N .GT. 3 ) THEN
        
        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Mat_Otimes_Obj()", &
                        "Mat should be square matrix, &
                        and Size should be less than equal to 3, &
                        Program Stopped!!!" &
                    )
        STOP

    END IF

    DummyMat = 0.0_DFP
    DummyMat( 1:N, 1:N ) = Mat( 1:N, 1:N )

    T = Obj

    Mat_Otimes_Obj = DummyMat .Otimes. T

    CALL T % DeallocateData( )

 END FUNCTION Mat_Otimes_Obj

!------------------------------------------------------------------------------
!                                                            Obj_Otimes_Tensor
!------------------------------------------------------------------------------

 FUNCTION Obj_Otimes_Tensor( Obj, TensorObj )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .otimes. Tensor
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables

    CLASS( Stress_ ), INTENT( IN ) :: Obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: TensorObj
    REAL( DFP ), DIMENSION( 6, 6 ) :: Obj_Otimes_Tensor

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Tensor()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP
    END IF

    T = Obj

    Obj_Otimes_Tensor = T .Otimes. TensorObj

    CALL T % DeallocateData( )

 END FUNCTION Obj_Otimes_Tensor

!------------------------------------------------------------------------------
!                                                            Tensor_Otimes_Obj
!------------------------------------------------------------------------------

 FUNCTION Tensor_Otimes_Obj( TensorObj, Obj )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Tensor .otimes. Obj
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables

    CLASS( Stress_ ), INTENT( IN ) :: Obj
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: TensorObj
    REAL( DFP ), DIMENSION( 6, 6 ) :: Tensor_Otimes_Obj

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Tensor_Otimes_Obj()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP
    END IF

    T = Obj

    Tensor_Otimes_Obj = TensorObj .Otimes. T

    CALL T % DeallocateData( )

 END FUNCTION Tensor_Otimes_Obj

!------------------------------------------------------------------------------
!                                                            Obj_Otimes_Vec
!------------------------------------------------------------------------------

 FUNCTION Obj_Otimes_Vec( Obj, Vec )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .otimes. Vec
!       2.  Vec is voigt vector of type stress
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 6, 6 ) :: Obj_Otimes_Vec

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T1, T2

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Vec()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP

    END IF

    IF( SIZE( Vec ) .GT. 6 ) THEN 

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Obj_Otimes_Vec()", &
                        "The length of Vec must be less than or equal to 6. &
                        Program Stopped !!! " &
                    )
        STOP

    END IF

    T1 = Obj
    T2 = Rank2Tensor( Vec, "Stress")
    
    Obj_Otimes_Vec = T1 .Otimes. T2

    CALL T1 % DeallocateData( )
    CALL T2 % DeallocateData( )

 END FUNCTION Obj_Otimes_Vec

!------------------------------------------------------------------------------
!                                                               Vec_Otimes_Obj
!------------------------------------------------------------------------------

 FUNCTION Vec_Otimes_Obj( Vec, Obj )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Vec .otimes. Obj
!       2.  Vec is voigt vector of type stress
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( 6, 6 ) :: Vec_Otimes_Obj

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T1, T2

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Vec_Otimes_Obj()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP

    END IF

    IF( SIZE( Vec ) .GT. 6 ) THEN 

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "Vec_Otimes_Obj()", &
                        "The length of Vec must be less than or equal to 6. &
                        Program Stopped !!! " &
                    )
        STOP

    END IF

    T1 = Obj
    T2 = Rank2Tensor( Vec, "Stress")
    
    Vec_Otimes_Obj = T2 .Otimes. T1

    CALL T1 % DeallocateData( )
    CALL T2 % DeallocateData( )

 END FUNCTION Vec_Otimes_Obj

!------------------------------------------------------------------------------
!                                                            m_Obj_Otimes_Vec
!------------------------------------------------------------------------------

 FUNCTION m_Obj_Otimes_Vec( Obj, Vec, VoigtType )

    USE Rank2Tensor_Class

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  Obj .otimes. Vec
!       2.  Vec is voigt vector of type stress
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    CLASS( Stress_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    CHARACTER( LEN = * ), INTENT( IN ) :: VoigtType
    REAL( DFP ), DIMENSION( 6, 6 ) :: m_Obj_Otimes_Vec

    ! Define internal variables
    TYPE( Rank2Tensor_ ) :: T1, T2

    IF( .NOT. ALLOCATED( Obj % V ) ) THEN

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "m_Obj_Otimes_Vec()", &
                        "Stress_ Obj is not allocated. Program Stopped" &
                    )
        STOP

    END IF

    IF( SIZE( Vec ) .GT. 6 ) THEN 

        CALL Err_Msg( &
                        "Stress_Class.f90>>Otimes.part", &
                        "m_Obj_Otimes_Vec()", &
                        "The length of Vec must be less than or equal to 6. &
                        Program Stopped !!! " &
                    )
        STOP

    END IF

    T1 = Obj
    T2 = Rank2Tensor( Vec, VoigtType )
    
    m_Obj_Otimes_Vec = T1 .Otimes. T2

    CALL T1 % DeallocateData( )
    CALL T2 % DeallocateData( )

 END FUNCTION m_Obj_Otimes_Vec