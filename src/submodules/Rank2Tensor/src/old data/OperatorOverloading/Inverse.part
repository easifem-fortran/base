!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   Inverse.part
!                   Last Update :   Dec-17-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Tensor class is defined
!   HOSTING FILE
!       -   Rank2Tensor_Class.f90
!==============================================================================

!------------------------------------------------------------------------------
!                                                                  f_inverse_1
!------------------------------------------------------------------------------

FUNCTION f_inverse_1( Mat )

    USE Utility, ONLY : INV

    REAL( DFP ), ALLOCATABLE, DIMENSION( :, : ), INTENT( IN ) :: Mat
    REAL( DFP ), DIMENSION( SIZE( Mat,1 ), SIZE( Mat, 2 ) ) :: f_inverse_1


    Error_Flag = .FALSE.

    CALL INV( A = Mat, INVA = f_inverse_1 )

    CALL Check_Error(                                       &
    "Rank2Tensor_Class.f90>>Inverse.part>>f_inverse_1()",   &
    "Traceback ---> CALL INV( A = Mat, INVA = Mat )"        &
    )

END FUNCTION f_inverse_1

!------------------------------------------------------------------------------
!                                                                  m_inverse_1
!------------------------------------------------------------------------------

FUNCTION m_inverse_1( Obj )

    USE Utility, ONLY : INV

    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( 3, 3 ) :: m_inverse_1


    Error_Flag = .FALSE.

    CALL INV( A = Obj%T, INVA = m_inverse_1 )

    CALL Check_Error(                                       &
    "Rank2Tensor_Class.f90>>Inverse.part>>m_inverse_1()",   &
    "Traceback ---> CALL INV( A = Mat, INVA = Mat )"        &
    )

END FUNCTION m_inverse_1