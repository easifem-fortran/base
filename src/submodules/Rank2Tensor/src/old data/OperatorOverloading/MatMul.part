!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   MatMul.part
!                   Last Update :   Dec-13-2017
!
!------------------------------------------------------------------------------
!                       Details of Program
!==============================================================================
!
!   TYPE :: Part of the program
!
!   DESCRIPTION
!       -   Tensor class is defined
!   HOSTING FILE
!       -   Rank2Tensor_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                          MatMul_1
!------------------------------------------------------------------------------
!
 FUNCTION MatMul_1( Obj, Obj2 )
!
!   DESCRIPTION
!------------------------------------------------------------------------------
!       1.  -  Tensor Class
!------------------------------------------------------------------------------
!
!   Define intent of dummy variables
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Obj, Obj2
    REAL( DFP ), DIMENSION( 3, 3 ) :: MatMul_1

    Error_Flag = .FALSE.

#ifdef DEBUG_VER
    IF( .NOT. ALLOCATED( Obj % T ) &
        .OR. .NOT. ALLOCATED( Obj2 % T ) ) THEN 

        CALL Err_Msg(                                                     &
                       "Rank2Tensor_Class.f90>>OperatorOverloading.part", &
                        "MatMul_1()",                          &
                        "Tensor_ Obj is/are not allocated. Program Stopped"&
                    )
        Error_Flag = .TRUE.

        STOP

    END IF
#endif
    MatMul_1 = MATMUL( Obj % T,  Obj2 % T )

 END FUNCTION MatMul_1
!
!------------------------------------------------------------------------------
!                                                          MatMul_2
!------------------------------------------------------------------------------
!
 FUNCTION MatMul_2( Obj, Mat2 )
!
!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  Obj .matmul. Mat
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!
!   Define intent of dummy variables
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat2
    REAL( DFP ), DIMENSION( 3, 3 ) :: MatMul_2

    ! Define internal variables
    INTEGER( I4B ) :: N
    Error_Flag = .FALSE.

#ifdef DEBUG_VER
    IF( .NOT. ALLOCATED( Obj % T ) ) THEN

        CALL Err_Msg(                                                     &
                       "Rank2Tensor_Class.f90>>OperatorOverloading.part", &
                        "MatMul_2()",                          &
                        "Tensor_ Obj is not allocated. Program Stopped"   &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF
#endif

    N = SIZE( Mat2, 1 )
    MatMul_2 = 0.0_DFP

    SELECT CASE( N ) 

        CASE( 1 )

            MatMul_2( 1, 1 ) = Obj % T( 1, 1 ) * Mat2( 1, 1 )

        CASE( 2 )

            MatMul_2( 1:2, 1:2 ) = MATMUL(Obj % T( 1:2, 1:2 ), Mat2( 1:2, 1:2 ))

        CASE DEFAULT

            MatMul_2( 1:3, 1:3 ) = MATMUL(Obj % T( 1:3, 1:3 ), Mat2( 1:3, 1:3 ))

    END SELECT

 END FUNCTION MatMul_2
!
!------------------------------------------------------------------------------
!                                                                  MatMul_3
!------------------------------------------------------------------------------
!
 FUNCTION MatMul_3( Mat2, Obj )
!
!   DESCRIPTION
!------------------------------------------------------------------------------
!       1.  -  Mat .matmul. Obj
!------------------------------------------------------------------------------
!
!   Define intent of dummy variables
    CLASS( Rank2Tensor_ ), INTENT( IN ) :: Obj
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat2
    REAL( DFP ), DIMENSION( 3, 3 ) :: MatMul_3

    ! Define internal variables
    INTEGER( I4B ) :: N

    Error_Flag = .FALSE.

    IF( .NOT. ALLOCATED( Obj % T ) ) THEN 

        CALL Err_Msg(                                                     &
                       "Rank2Tensor_Class.f90>>OperatorOverloading.part", &
                        "MatMul_3()",                          &
                        "Tensor_ Obj is not allocated. Program Stopped"   &
                    )
        Error_Flag = .TRUE.

        STOP

    END IF

    N = SIZE( Mat2, 1 )
    MatMul_3 = 0.0_DFP

    SELECT CASE( N ) 

        CASE( 1 )

            MatMul_3( 1, 1 ) = Obj % T( 1, 1 ) * Mat2( 1, 1 )

        CASE( 2 )

            MatMul_3( 1:2, 1:2 ) = MATMUL( Mat2( 1:2, 1:2 ), Obj % T( 1:2, 1:2 ) )

        CASE DEFAULT

            MatMul_3( 1:3, 1:3 ) = MATMUL( Mat2( 1:3, 1:3 ), Obj % T( 1:3, 1:3 ) )

    END SELECT

 END FUNCTION MatMul_3

!------------------------------------------------------------------------------
!                                                                  MatVec
!------------------------------------------------------------------------------

 FUNCTION MatVec( Mat2, Vec )

!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  Used for defining the contraction operator
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat2
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( SIZE( Vec ) ) :: MatVec
    
    MatVec = MATMUL( Mat2, Vec )

 END FUNCTION MatVec

!------------------------------------------------------------------------------
!                                                                      VecMat
!------------------------------------------------------------------------------

 FUNCTION VecMat( Vec, Mat2 )

!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  used for defining the contraction operator
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat2
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ), DIMENSION( SIZE( Vec ) ) :: VecMat
    
    VecMat = MATMUL( TRANSPOSE( Mat2 ), Vec )

 END FUNCTION VecMat

!------------------------------------------------------------------------------
!                                                                      VecVec
!------------------------------------------------------------------------------

 FUNCTION VecVec( Vec, Vec2 )

!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  used for defining the contraction operator
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec2
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: Vec
    REAL( DFP ) :: VecVec
    
    VecVec = DOT_PRODUCT( Vec, Vec2 )

 END FUNCTION VecVec

!------------------------------------------------------------------------------
!                                                                      MatMat
!------------------------------------------------------------------------------

 FUNCTION MatMat( Mat1, Mat2 )

!   DESCRIPTION
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -  used for defining the contraction operator
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    ! Define intent of dummy variables
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat1
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: Mat2
    REAL( DFP ), DIMENSION( SIZE( Mat1, 1 ), SIZE( Mat2, 2) ) :: MatMat

    IF( SIZE( Mat1, 2 ) .NE. SIZE( Mat2, 1 ) ) THEN 

        CALL Err_Msg( &
        "Rank2Tensor_Class.f90>>MatMul.part>", &
        "Mat .matmul. Mat", &
        "Matrix multiplication is not compatible, Program Stopped!!!" &
        )
        STOP
    END IF
    
    MatMat = MATMUL( Mat1, Mat2 )

 END FUNCTION MatMat
