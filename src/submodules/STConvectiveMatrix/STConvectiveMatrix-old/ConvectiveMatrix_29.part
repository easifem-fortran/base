
!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_29.part
!                   Last Update :   Nov-17-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                       getConvectiveMatrix_29
!------------------------------------------------------------------------------

 SUBROUTINE getConvectiveMatrix_29( Obj, C, Term1, Term2 )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  C( : )
!   2.  Term1, Term2 = {0,1}
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    REAL( DFP ), DIMENSION( : ), INTENT( IN ) :: C
    INTEGER( I4B ), INTENT( IN ) :: Term1, Term2

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, b
    REAL( DFP ), ALLOCATABLE :: cdNTdXt( :, : ), Mat3( :, :, : )
    REAL( DFP ) ::  RealVal1, RealVal
    CLASS( STShapeData_ ), POINTER :: SD

    !  Flag-1
#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_1()", &
        "Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    NNS = SIZE( Obj % SD( 1,1 ) % N )
    NNT = SIZE( Obj % SD( 1,1 ) % T )
    NIPS = SIZE( Obj % SD, 1 )
    NIPT = SIZE( Obj % SD, 2 ) 

    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS, NNS, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP

    ALLOCATE( Mat3( NNS, NNS, NNT ) )

SELECT CASE( Term1 ) 

    CASE( 1 )

        SELECT CASE( Term2 )

            !( 1, 0 )
            CASE( 0 )

                DO IPT = 1, NIPT

                    DO IPS = 1, NIPS

                        SD => Obj % SD( IPS, IPT )
                        CALL SD % getProjectionOfdNTdXt( VectorValues = C, cdNTdXt = cdNTdXt )
                        RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                        DO a = 1, NNT

                            Mat3( :, :, a ) =  OUTERPROD( a = cdNTdXt( :, a ), b = SD % N )

                        END DO

                        DO b = 1, NNT 

                            RealVal = SD % T( b ) * RealVal1

                            Obj % Mat4( :, :, :, b ) = Obj % Mat4( :, :, :, b ) + &
                            Mat3 * RealVal

                        END DO

                    END DO

                END DO

#ifdef DEBUG_VER
            CASE DEFAULT

                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_1()", &
                "Unknown value of Term2; It should be 1 or 0" &
                )
                Error_Flag = .TRUE.
                RETURN
#endif

        END SELECT

    CASE( 0 )

        SELECT CASE( Term2 )
            
            !( 0, 1 )
            CASE( 1 )

                DO IPT = 1, NIPT
                
                    DO IPS = 1, NIPS    

                        SD => Obj % SD( IPS, IPT )
                        CALL SD % getProjectionOfdNTdXt( VectorValues = C, &
                            cdNTdXt = cdNTdXt )
                        RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

#ifdef DEBUG_VER
                        CALL Check_Error( &
                        "STConvectiveMatrix_Class.f90", &
                        "getConvectiveMatrix_1()" )
#endif

                        DO b = 1, NNT

                            Mat3( :, :, b ) =  OUTERPROD( a = SD % N, b = cdNTdXt( :, b ) )

                        END DO


                        DO a = 1, NNT
                
                                RealVal = SD % T( a ) * RealVal1
                                
                                Obj % Mat4( :, :, a, : ) = Obj % Mat4( :, :, a, : ) + &
                                Mat3 * RealVal

                        END DO

                    END DO

                END DO

#ifdef DEBUG_VER
            CASE DEFAULT

                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_1()", &
                "Unknown value of Term2; It should be 1 or 0" &
                )
                Error_Flag = .TRUE.
                RETURN
#endif

        END SELECT

#ifdef DEBUG_VER
    CASE DEFAULT

        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_1()", &
        "Unknown value of Term1; It should be 1 or 0" &
        )
        Error_Flag = .TRUE.
        RETURN
#endif

    END SELECT

    CALL Obj % Mat2FromMat4( )
    NULLIFY( SD )
    ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( Mat3 ) ) DEALLOCATE( Mat3 )
    IF( ALLOCATED( cdNTdXt ) ) DEALLOCATE( cdNTdXt )

 END SUBROUTINE getConvectiveMatrix_29

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

