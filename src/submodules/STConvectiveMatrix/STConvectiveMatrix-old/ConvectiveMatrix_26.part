!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_25.part
!                   Last Update :   Nov-19-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_26
!------------------------------------------------------------------------------

 SUBROUTINE getConvectiveMatrix_26( Obj, A, Term1, Term2, MultiVar )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  A( :, : )
!   2.  Term1 and Term2 {dt,dx,dy,dz}
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    REAL( DFP ), DIMENSION( :, : ), INTENT( IN ) :: A
    CHARACTER( LEN = * ), INTENT( IN ) :: Term1, Term2
    LOGICAL( LGT ), INTENT( IN ) :: MultiVar

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, aa, b, NSD, &
                      i, j, r1, r2, c1, c2, M
    REAL( DFP ), ALLOCATABLE :: Mat4( :, :, :, : )
    REAL( DFP ) :: RealVal, Aij
    INTEGER( I4B ) :: XIndex
    CLASS( STShapeData_ ), POINTER :: SD
    INTEGER( I4B ), ALLOCATABLE :: Indx( :, : )

    XIndex = 1

#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_26()", &
        "STMassMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

NIPT = SIZE( Obj % SD, 2 ) 
NNS = SIZE( Obj % SD( 1,1 ) % N )
NNT = SIZE( Obj % SD( 1,1 ) % T )
NIPS = SIZE( Obj % SD, 1 )
NSD = Obj % SD( 1, 1 ) % getNSD( )

#ifdef DEBUG_VER
    IF( SIZE( A, 1 ) .NE. SIZE( A, 2 ) ) THEN 

        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_26()", &
        "The size of first and second dimension of A must be same" &
        )
        Error_Flag = .TRUE.
        RETURN

    END IF
#endif

    M = SIZE( A, 1 )

#ifdef DEBUG_VER
    SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )
        
        CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term1 is dx therefore NSD should be &
                & greater than or equal to 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term1 is dy therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term1 is dz therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT

    SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
        
        CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg("STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term2 is dx therefore NSD should be &
                & greater than or equal to 1" )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term2 is dy therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_26()", &
                "Term2 is dz therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT
#endif

    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS*M, NNS*M, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP

    ALLOCATE( Mat4( NNS, NNS, NNT, NNT ) )

    ALLOCATE( Indx( M, 2 ) )
    Indx = 0
    DO i = 1, M
        Indx( i, 1 ) = (i-1)*NNS + 1
        Indx( i, 2 ) = i*NNS
    END DO

    SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )

        CASE( "dt", "DT", "dT", "t"  )

            SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
                
                ! CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

                !     XIndex = 1

                CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

                    XIndex = 2

                CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

                    XIndex = 3

            END SELECT  

            DO IPT = 1, NIPT

                DO IPS = 1, NIPS

                    SD => Obj % SD( IPS, IPT )
                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness
                    ! Mat2 = A( :, :, IPS, IPT )

                    DO b = 1, NNT

                        DO aa = 1, NNT

                            Mat4( :, :, aa, b ) = OUTERPROD( a = SD % dNTdt( :, aa ), &
                            b = SD % dNTdXt( :, XIndex, b ) )

                        END DO

                    END DO

                    Mat4 = Mat4 * RealVal

                    DO j = 1, M
                        
                        c1 = Indx( j, 1 )
                        c2 = Indx( j, 2 )

                        DO i = 1, M

                            r1 = Indx( i, 1 )
                            r2 = Indx( i, 2 )

                            Aij = A( i, j )

                            Obj % Mat4( r1:r2, c1:c2, :, : ) = Obj % Mat4( r1:r2, c1:c2, :, : ) &
                            + Mat4( :, :, :, : ) * Aij

                        END DO

                    END DO 

                END DO

            END DO

        CASE DEFAULT

            SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )
                
                ! CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

                !     XIndex = 1

                CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

                    XIndex = 2

                CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

                    XIndex = 3

            END SELECT 

            DO IPT = 1, NIPT

                DO IPS = 1, NIPS

                    SD => Obj % SD( IPS, IPT )
                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness
                    ! Mat2 = A( :, :, IPS, IPT )

                    DO b = 1, NNT

                        DO aa = 1, NNT

                            Mat4( :, :, aa, b ) = OUTERPROD( a = SD % dNTdXt( :, XIndex, aa ), &
                            b =  SD % dNTdt( :, b ) )

                        END DO

                    END DO

                    Mat4 = Mat4 * RealVal

                    DO j = 1, M
                        
                        c1 = Indx( j, 1 )
                        c2 = Indx( j, 2 )

                        DO i = 1, M

                            r1 = Indx( i, 1 )
                            r2 = Indx( i, 2 )

                            Aij = A( j, i )

                            Obj % Mat4( r1:r2, c1:c2, :, : ) = Obj % Mat4( r1:r2, c1:c2, :, : ) &
                            + Mat4( :, :, :, : ) * Aij

                        END DO

                    END DO

                END DO
                
            END DO

    END SELECT

    CALL Obj % Mat2FromMat4( )
    NULLIFY( SD )
    ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( Mat4 ) ) DEALLOCATE( Mat4 )
    IF( ALLOCATED( Indx ) ) DEALLOCATE( Indx )

 END SUBROUTINE getConvectiveMatrix_26

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

