!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_22.part
!                   Last Update :   Nov-19-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_22
!------------------------------------------------------------------------------
 
 SUBROUTINE getConvectiveMatrix_22( Obj, Term1, Term2 )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!   1.  Term1 and Term2 = {dt, dx, dy, dz}
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    CHARACTER( LEN = * ), INTENT( IN ) :: Term1, Term2

!   Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, NSD
    REAL( DFP ) :: RealVal
    INTEGER( I4B ) :: XIndex
    CLASS( STShapeData_ ), POINTER :: SD
    REAL( DFP ), ALLOCATABLE :: DummyVec1( :, : ), DummyVec2( :, : )

    XIndex = 1

#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_22()", &
        "STMassMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    NIPT = SIZE( Obj % SD, 2 ) 
    NNS = SIZE( Obj % SD( 1,1 ) % N )
    NNT = SIZE( Obj % SD( 1,1 ) % T )
    NIPS = SIZE( Obj % SD, 1 )
    NSD = Obj % SD( 1, 1 ) % getNSD( )

#ifdef DEBUG_VER
    SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )
        
        CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term1 is dx therefore NSD should be &
                & greater than or equal to 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term1 is dy therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term1 is dz therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT

    SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
        
        CASE( "dX", "dx", "dx1", "dX1", "X", "x", "x1", "X1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term2 is dx therefore NSD should be &
                & greater than or equal to 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term2 is dy therefore NSD should be greater than 1" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_22()", &
                "Term2 is dz therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT
#endif

    IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    ALLOCATE( Obj % Mat2( NNS*NNT, NNS*NNT ) )
    Obj % Mat2 = 0.0_DFP

    SELECT CASE( TRIM( ADJUSTL(Term1) ) ) 

        CASE( "dt", "DT", "Dt", "dT" )

            SELECT CASE( TRIM( ADJUSTL( Term2 ) ) )
                
                CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

                    XIndex = 1

                CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

                    XIndex = 2

                CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

                    XIndex = 3

            END SELECT
            
            DO IPT = 1, NIPT

                DO IPS = 1, NIPS

                    SD => Obj % SD( IPS, IPT )

                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                    DummyVec1 = RESHAPE( SD % dNTdt, (/NNS*NNT, 1/) )
                    DummyVec2 = RealVal * RESHAPE( SD % dNTdXt( :, XIndex, : ), (/NNS*NNT, 1/) )

                    Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + &
                    OUTERPROD( a = DummyVec1( :, 1 ), b = DummyVec2( :, 1 ) )

                END DO

            END DO

        CASE DEFAULT

            SELECT CASE( TRIM( ADJUSTL( Term1 ) ) )
                
                CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

                    XIndex = 1

                CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2" )

                    XIndex = 2

                CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

                    XIndex = 3

            END SELECT

            DO IPT = 1, NIPT

                DO IPS = 1, NIPS

                    SD => Obj % SD( IPS, IPT )
                    RealVal = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                    DummyVec1 = RESHAPE( SD % dNTdt, (/NNS*NNT, 1/) )
                    DummyVec2 = RealVal * RESHAPE( SD % dNTdXt( :, XIndex, : ), (/NNS*NNT, 1/) )

                    Obj % Mat2( :, : ) = Obj % Mat2( :, : ) + &
                    OUTERPROD( b = DummyVec1( :, 1 ), a = DummyVec2( :, 1 ) )

                END DO

            END DO

    END SELECT

    CALL Obj % Mat4FromMat2( NNT, NNT )

    NULLIFY( SD )
    IF( ALLOCATED( DummyVec1 ) ) DEALLOCATE( DummyVec1 )
    IF( ALLOCATED( DummyVec2 ) ) DEALLOCATE( DummyVec2 )


 END SUBROUTINE getConvectiveMatrix_22

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

