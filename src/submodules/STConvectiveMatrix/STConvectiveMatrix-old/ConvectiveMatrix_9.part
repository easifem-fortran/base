!
!------------------------------------------------------------------------------
!                   Author      :   Vikas sharma
!                   Position    :   Doctral Student
!                   Institute   :   Kyoto Univeristy, Japan
!                   Program name:   ConvectiveMatrix_9.part
!                   Last Update :   Nov-17-2017
!
!------------------------------------------------------------------------------
!                           Details of Program
!==============================================================================
!
!   TYPE    ::  Part of the Code
!
!   DESCRIPTION
!       -   This code is part of the code
!
!   HOSTING FILE
!       -    STConvectiveMatrix_Class.f90
!
!==============================================================================

!------------------------------------------------------------------------------
!                                                        getConvectiveMatrix_9
!------------------------------------------------------------------------------

 SUBROUTINE getConvectiveMatrix_9( Obj, Term1, Term2, Xtype )

!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .
!       1.  -   Returns mass matrix; C is a 2D array of STNodal Values
!.  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .

    USE Utility, ONLY : OUTERPROD

    ! Define intent of dummy variables
#ifdef STMat
    CLASS( SpaceTimeMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#else
    CLASS( STConvectiveMatrix_ ), INTENT( INOUT ), TARGET ::  Obj
#endif
    INTEGER( I4B ), INTENT( IN ) :: Term1, Term2
    CHARACTER( LEN = * ), INTENT( IN ) :: XType

    ! Define internal variables
    INTEGER( I4B ) :: NNS, NNT, NIPS, NIPT, IPS, IPT, a, b, NSD
    REAL( DFP ), ALLOCATABLE :: Mat3( :, :, : )
    REAL( DFP ) :: RealVal, RealVal1
    INTEGER( I4B ) :: XIndex
    CLASS( STShapeData_ ), POINTER :: SD

    XIndex = 1
    
#ifdef DEBUG_VER
    Error_Flag = .FALSE.
    IF( .NOT. Obj % isInitiated( ) ) THEN
        CALL Err_Msg( &
        "STConvectiveMatrix_Class.f90", &
        "getConvectiveMatrix_9(), Flag-1", &
        "STMassMatrix_ Object is not Initiated" &
        )
        Error_Flag = .TRUE.
        RETURN
    END IF
#endif

    NIPT = SIZE( Obj % SD, 2 ) 
    NNS = SIZE( Obj % SD( 1,1 ) % N )
    NNT = SIZE( Obj % SD( 1,1 ) % T )
    NIPS = SIZE( Obj % SD, 1 )
    NSD = Obj % SD( 1, 1 ) % getNSD( )

#ifdef DEBUG_VER
    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

            IF( NSD .LT. 1 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_9(), Flag-1", &
                "XType is 'dX' therefore NSD should be &
                & greater than or equal to 1" )
                Error_Flag = .TRUE.
                RETURN
        
            END IF
        
        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2"  )

            IF( NSD .LT. 2 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_9()", &
                "XType is 'dY' therefore NSD should be greater than 1" )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            IF( NSD .LT. 3 ) THEN 
        
                CALL Err_Msg( &
                "STConvectiveMatrix_Class.f90", &
                "getConvectiveMatrix_9()", &
                "XType is Z therefore NSD should be greater than 2" &
                )
                Error_Flag = .TRUE.
                RETURN
        
            END IF

    END SELECT
#endif

    SELECT CASE( TRIM( ADJUSTL( XType ) ) )
        
        CASE( "X", "x", "x1", "X1", "dX", "dx", "dx1", "dX1" )

            XIndex = 1

        CASE( "Y", "y", "x2", "X2", "dY", "dy", "dx2", "dX2"  )

            XIndex = 2

        CASE( "Z", "z", "x3", "X3", "dZ", "dz", "dx3", "dX3" )

            XIndex = 3

    END SELECT

    IF( ALLOCATED( Obj % Mat4 ) ) DEALLOCATE( Obj % Mat4 )
    ALLOCATE( Obj % Mat4( NNS, NNS, NNT, NNT ) )
    Obj % Mat4 = 0.0_DFP
    ALLOCATE( Mat3( NNS, NNS, NNT ) )

    SELECT CASE( Term1 )

        CASE( 1 )

            SELECT CASE( Term2 )

                !( 1, 0 )
                CASE( 0 )

                    DO IPT = 1, NIPT

                        DO IPS = 1, NIPS 

                            SD => Obj % SD( IPS, IPT )
                            RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                            DO a = 1, NNT

                                Mat3( :, :, a ) = OUTERPROD( a = SD % dNTdXt( :, XIndex, a ), b = SD % N )

                            END DO

                            DO b = 1, NNT

                                RealVal = RealVal1 * SD % T( b )
                                Obj % Mat4( :, :, :, b ) = Obj % Mat4( :, :, :, b ) + &
                                Mat3 * RealVal

                            END DO

                        END DO

                    END DO
#ifdef DEBUG_VER
                CASE DEFAULT

                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_9()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
#endif
            END SELECT

        CASE( 0 )


            SELECT CASE( Term2 )
                
                !( 0, 1 )
                CASE( 1 )

                    DO IPT = 1, NIPT

                        DO IPS = 1, NIPS

                            SD => Obj % SD( IPS, IPT )
                            RealVal1 = SD % Ws * SD % Wt * SD % Js_Xi2Xt * SD % Jt * SD % Thickness

                            DO b = 1, NNT

                                Mat3( :, :, b ) = OUTERPROD( a = SD % N, b = SD % dNTdXt( :, XIndex, b ) )

                            END DO

                            DO a = 1, NNT

                                RealVal = RealVal1 * SD % T( a )
                                Obj % Mat4( :, :, a, : ) = Obj % Mat4( :, :, a, : ) + &
                                Mat3 * RealVal

                            END DO

                        END DO

                    END DO
#ifdef DEBUG_VER
                CASE DEFAULT

                    CALL Err_Msg( &
                    "STConvectiveMatrix_Class.f90", &
                    "getConvectiveMatrix_9()", &
                    "Unknown value of Term2; It should be 1 or 0" &
                    )
                    Error_Flag = .TRUE.
                    RETURN
#endif
            END SELECT
#ifdef DEBUG_VER
        CASE DEFAULT

            CALL Err_Msg( &
            "STConvectiveMatrix_Class.f90", &
            "getConvectiveMatrix_9()", &
            "Unknown value of Term1; It should be 1 or 0" &
            )
            Error_Flag = .TRUE.
            RETURN
#endif
    END SELECT

    CALL Obj % Mat2FromMat4( )
    NULLIFY( SD )
    ! IF( ALLOCATED( Obj % Mat2 ) ) DEALLOCATE( Obj % Mat2 )
    IF( ALLOCATED( Mat3 ) ) DEALLOCATE( Mat3 )

 END SUBROUTINE getConvectiveMatrix_9

!------------------------------------------------------------------------------
!
!------------------------------------------------------------------------------

