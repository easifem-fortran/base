var tipuesearch = {"pages":[{"title":" EASIFEM ","text":"EASIFEM FORD features two macros to make it easier to provide intradocumentation links. These are . which gets replaced by the project URL, and ./media , which gets replaced by the (absolute) path to the media directory in the output. you can also use favicon: Developer Info Dr Vikas Sharma Postdoctoral fellow\nIndian Institute of Technology Bombay\nMumbai, India","tags":"home","loc":"index.html"},{"title":"Mesh_Class.f90 – EASIFEM","text":"Contents Modules Mesh_Class Source Code Mesh_Class.f90 Source Code !> ! The module `Mesh_Class` contains three data types `Mesh_`, `MeshData_`, and ! `MeshConnectivity_`. MODULE Mesh_Class USE BaseType USE GlobalData USE StringiFor USE FE IMPLICIT NONE PRIVATE REAL ( DFP ), PARAMETER :: default_factor = 1.5_DFP !---------------------------------------------------------------------------- !                                                                      Mesh_ !---------------------------------------------------------------------------- !> ! author: Dr Vikas Sharma ! ! In **EASIFEM** `Mesh_` data type denotes a collection of finite elements. ! To do so I have encapsulated a vector of `ElementPointer_`. In this way ! adding and removing an element becomes really simply as one is dealing with ! vector of addresses. TYPE :: Mesh_ TYPE ( ElementPointer_ ), ALLOCATABLE :: Elem ( : ) !! Vector of `ElementPointer_` denotes the elements in the mesh INTEGER ( I4B ) :: NSD !! Spatial dimension INTEGER ( I4B ) :: tElements !! Total elements in the mesh INTEGER ( I4B ) :: maxElements !! Maximum storage length `maxElements= default_factor * tElements` CONTAINS PROCEDURE , PUBLIC , PASS ( Obj ) :: Initiate => allocateMeshSize !! Constructor for mesh END TYPE Mesh_ PUBLIC :: Mesh_ !---------------------------------------------------------------------------- !                                                       Initiate@MeshMethods !---------------------------------------------------------------------------- INTERFACE !> author: Dr Vikas Sharma !  Initiate-->allocateMeshSize  allocate the mesh size MODULE PURE SUBROUTINE allocateMeshSize ( Obj , NSD , tElements , factor ) CLASS ( Mesh_ ), INTENT ( INOUT ) :: Obj !! Mesh which will be allocated INTEGER ( I4B ), INTENT ( IN ) :: tElements !! Total number of elements INTEGER ( I4B ), INTENT ( IN ) :: NSD !! Spatial dimension of the problem REAL ( DFP ), OPTIONAL , INTENT ( IN ) :: factor !! maxElements = factor * tElements END SUBROUTINE allocateMeshSize END INTERFACE !> ! Generic subroutine for constructing the [[Mesh_]] INTERFACE Initiate MODULE PROCEDURE allocateMeshSize END INTERFACE Initiate PUBLIC :: Initiate !---------------------------------------------------------------------------- !                                                                 MeshData_ !---------------------------------------------------------------------------- !> ! author: Dr Vikas Sharma ! ! In **EASIFEM** `Meshdata_` data type denotes a data realated a mesh TYPE :: MeshData_ INTEGER ( I4B ) :: MaxNptrs , MinNptrs , tNodes LOGICAL ( LGT ) :: isInitiated INTEGER ( I4B ), ALLOCATABLE :: LBndyIndex ( : ) INTEGER ( I4B ), ALLOCATABLE :: Nptrs ( : ) INTEGER ( I4B ), ALLOCATABLE :: BoundaryNptrs ( : ) INTEGER ( I4B ), ALLOCATABLE :: InternalNptrs ( : ) INTEGER ( I4B ), ALLOCATABLE :: Local_Nptrs ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: NodeToElem ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: ElemToElem ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: NTN ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: ElemToNode ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: BoundaryData ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: InternalBndyElemNum ( : ) TYPE ( IntVector_ ), ALLOCATABLE :: InternalBoundaryData ( : ) TYPE ( BoundingBox_ ) :: BBox CONTAINS PROCEDURE , PUBLIC , PASS ( Obj ) :: Initiate => init_meshdata_1 !! Constructor for [[MeshData_]] object END TYPE PUBLIC :: MeshData_ !---------------------------------------------------------------------------- !                                                    Initiate@MeshDataMethods !---------------------------------------------------------------------------- !> author: Dr Vikas Sharma !  Initiate-->init_mesh_data_1  constructor for [[MeshData_]] INTERFACE MODULE PURE SUBROUTINE init_meshdata_1 ( Obj , MeshObj ) CLASS ( MeshData_ ), INTENT ( INOUT ) :: Obj CLASS ( Mesh_ ), INTENT ( INOUT ) :: MeshObj END SUBROUTINE init_meshdata_1 END INTERFACE !> ! Generic subroutine for constructing [[MeshData_]] INTERFACE Initiate MODULE PROCEDURE init_meshdata_1 END INTERFACE Initiate PUBLIC :: Initiate END MODULE Mesh_Class","tags":"","loc":"sourcefile/mesh_class.f90.html"},{"title":"MeshData_ – EASIFEM ","text":"type, public :: MeshData_ author: Dr Vikas Sharma In EASIFEM Meshdata_ data type denotes a data realated a mesh Inherits type~~meshdata_~~InheritsGraph type~meshdata_ MeshData_ BoundingBox_ BoundingBox_ type~meshdata_->BoundingBox_ BBox IntVector_ IntVector_ type~meshdata_->IntVector_ NodeToElem, ElemToElem, NTN, ElemToNode, BoundaryData, InternalBndyElemNum, InternalBoundaryData var pantypemeshdata_InheritsGraph = svgPanZoom('#typemeshdata_InheritsGraph', {zoomEnabled: true,controlIconsEnabled: true, fit: true, center: true,}); Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables BBox BoundaryData BoundaryNptrs ElemToElem ElemToNode InternalBndyElemNum InternalBoundaryData InternalNptrs LBndyIndex Local_Nptrs MaxNptrs MinNptrs NTN NodeToElem Nptrs isInitiated tNodes Type-Bound Procedures Initiate Components Type Visibility Attributes Name Initial type(BoundingBox_), public :: BBox type(IntVector_), public, ALLOCATABLE :: BoundaryData (:) integer(kind=I4B), public, ALLOCATABLE :: BoundaryNptrs (:) type(IntVector_), public, ALLOCATABLE :: ElemToElem (:) type(IntVector_), public, ALLOCATABLE :: ElemToNode (:) type(IntVector_), public, ALLOCATABLE :: InternalBndyElemNum (:) type(IntVector_), public, ALLOCATABLE :: InternalBoundaryData (:) integer(kind=I4B), public, ALLOCATABLE :: InternalNptrs (:) integer(kind=I4B), public, ALLOCATABLE :: LBndyIndex (:) integer(kind=I4B), public, ALLOCATABLE :: Local_Nptrs (:) integer(kind=I4B), public :: MaxNptrs integer(kind=I4B), public :: MinNptrs type(IntVector_), public, ALLOCATABLE :: NTN (:) type(IntVector_), public, ALLOCATABLE :: NodeToElem (:) integer(kind=I4B), public, ALLOCATABLE :: Nptrs (:) logical(kind=LGT), public :: isInitiated integer(kind=I4B), public :: tNodes Type-Bound Procedures procedure, public, PASS( Obj ) :: Initiate => init_meshdata_1 Constructor for MeshData_ object interface Initiate–>init_mesh_data_1  constructor for MeshData_ private subroutine init_meshdata_1(Obj, MeshObj) Arguments Type Intent Optional Attributes Name class( MeshData_ ), intent(inout) :: Obj class( Mesh_ ), intent(inout) :: MeshObj","tags":"","loc":"type/meshdata_.html"},{"title":"Mesh_ – EASIFEM ","text":"type, public :: Mesh_ author: Dr Vikas Sharma In EASIFEM Mesh_ data type denotes a collection of finite elements.\n To do so I have encapsulated a vector of ElementPointer_ . In this way\n adding and removing an element becomes really simply as one is dealing with\n vector of addresses. Inherits type~~mesh_~~InheritsGraph type~mesh_ Mesh_ ElementPointer_ ElementPointer_ type~mesh_->ElementPointer_ Elem Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables Elem NSD maxElements tElements Type-Bound Procedures Initiate Source Code Mesh_ Components Type Visibility Attributes Name Initial type(ElementPointer_), public, ALLOCATABLE :: Elem (:) Vector of ElementPointer_ denotes the elements in the mesh integer(kind=I4B), public :: NSD Spatial dimension integer(kind=I4B), public :: maxElements Maximum storage length maxElements= default_factor * tElements integer(kind=I4B), public :: tElements Total elements in the mesh Type-Bound Procedures procedure, public, PASS( Obj ) :: Initiate => allocateMeshSize Constructor for mesh interface private subroutine allocateMeshSize(Obj, NSD, tElements, factor) Initiate–>allocateMeshSize  allocate the mesh size Arguments Type Intent Optional Attributes Name class( Mesh_ ), intent(inout) :: Obj Mesh which will be allocated integer(kind=I4B), intent(in) :: NSD Spatial dimension of the problem integer(kind=I4B), intent(in) :: tElements Total number of elements real(kind=DFP), intent(in), optional :: factor maxElements = factor * tElements Source Code TYPE :: Mesh_ TYPE ( ElementPointer_ ), ALLOCATABLE :: Elem ( : ) !! Vector of `ElementPointer_` denotes the elements in the mesh INTEGER ( I4B ) :: NSD !! Spatial dimension INTEGER ( I4B ) :: tElements !! Total elements in the mesh INTEGER ( I4B ) :: maxElements !! Maximum storage length `maxElements= default_factor * tElements` CONTAINS PROCEDURE , PUBLIC , PASS ( Obj ) :: Initiate => allocateMeshSize !! Constructor for mesh END TYPE Mesh_","tags":"","loc":"type/mesh_.html"},{"title":"Initiate – EASIFEM","text":"public interface Initiate Generic subroutine for constructing the Mesh_ Calls interface~~initiate~~CallsGraph interface~initiate Initiate interface~allocatemeshsize allocateMeshSize interface~initiate->interface~allocatemeshsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures allocateMeshSize Module Procedures private interface allocateMeshSize () Arguments None","tags":"","loc":"interface/initiate.html"},{"title":"Initiate – EASIFEM","text":"private interface Initiate Generic subroutine for constructing MeshData_ Calls interface~~initiate~2~~CallsGraph interface~initiate~2 Initiate interface~init_meshdata_1 init_meshdata_1 interface~initiate~2->interface~init_meshdata_1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Module Procedures init_meshdata_1 Module Procedures private interface init_meshdata_1 () Author Dr Vikas Sharma Initiate–>init_mesh_data_1  constructor for MeshData_ Arguments None","tags":"","loc":"interface/initiate~2.html"},{"title":"allocateMeshSize – EASIFEM","text":"interface Called by interface~~allocatemeshsize~~CalledByGraph interface~allocatemeshsize allocateMeshSize interface~initiate Initiate interface~initiate->interface~allocatemeshsize Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private subroutine allocateMeshSize(Obj, NSD, tElements, factor) Arguments Type Intent Optional Attributes Name class( Mesh_ ), intent(inout) :: Obj Mesh which will be allocated integer(kind=I4B), intent(in) :: NSD Spatial dimension of the problem integer(kind=I4B), intent(in) :: tElements Total number of elements real(kind=DFP), intent(in), optional :: factor maxElements = factor * tElements Description Initiate–>allocateMeshSize  allocate the mesh size","tags":"","loc":"interface/allocatemeshsize.html"},{"title":"init_meshdata_1 – EASIFEM","text":"interface Initiate–>init_mesh_data_1  constructor for MeshData_ Called by interface~~init_meshdata_1~~CalledByGraph interface~init_meshdata_1 init_meshdata_1 interface~initiate~2 Initiate interface~initiate~2->interface~init_meshdata_1 Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. private subroutine init_meshdata_1(Obj, MeshObj) Arguments Type Intent Optional Attributes Name class( MeshData_ ), intent(inout) :: Obj class( Mesh_ ), intent(inout) :: MeshObj","tags":"","loc":"interface/init_meshdata_1.html"},{"title":"Mesh_Class – EASIFEM","text":"The module Mesh_Class contains three data types Mesh_ , MeshData_ , and MeshConnectivity_ . Uses BaseType GlobalData StringiFor FE module~~mesh_class~~UsesGraph module~mesh_class Mesh_Class BaseType BaseType module~mesh_class->BaseType StringiFor StringiFor module~mesh_class->StringiFor FE FE module~mesh_class->FE GlobalData GlobalData module~mesh_class->GlobalData Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\n    descended from. Dashed arrows point from a module or program unit to \n    modules which it uses. Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables default_factor Interfaces Initiate Initiate allocateMeshSize init_meshdata_1 Derived Types MeshData_ Mesh_ Variables Type Visibility Attributes Name Initial real(kind=DFP), private, parameter :: default_factor = 1.5_DFP Interfaces public interface Initiate Generic subroutine for constructing the Mesh_ private interface allocateMeshSize () Arguments None private interface Initiate Generic subroutine for constructing MeshData_ private interface init_meshdata_1 () Author Dr Vikas Sharma Initiate–>init_mesh_data_1  constructor for MeshData_ Arguments None interface private subroutine allocateMeshSize(Obj, NSD, tElements, factor) Initiate–>allocateMeshSize  allocate the mesh size Arguments Type Intent Optional Attributes Name class( Mesh_ ), intent(inout) :: Obj Mesh which will be allocated integer(kind=I4B), intent(in) :: NSD Spatial dimension of the problem integer(kind=I4B), intent(in) :: tElements Total number of elements real(kind=DFP), intent(in), optional :: factor maxElements = factor * tElements interface Initiate–>init_mesh_data_1  constructor for MeshData_ private subroutine init_meshdata_1(Obj, MeshObj) Arguments Type Intent Optional Attributes Name class( MeshData_ ), intent(inout) :: Obj class( Mesh_ ), intent(inout) :: MeshObj Derived Types type, public :: MeshData_ author: Dr Vikas Sharma Read more… Components Type Visibility Attributes Name Initial type(BoundingBox_), public :: BBox type(IntVector_), public, ALLOCATABLE :: BoundaryData (:) integer(kind=I4B), public, ALLOCATABLE :: BoundaryNptrs (:) type(IntVector_), public, ALLOCATABLE :: ElemToElem (:) type(IntVector_), public, ALLOCATABLE :: ElemToNode (:) type(IntVector_), public, ALLOCATABLE :: InternalBndyElemNum (:) type(IntVector_), public, ALLOCATABLE :: InternalBoundaryData (:) integer(kind=I4B), public, ALLOCATABLE :: InternalNptrs (:) integer(kind=I4B), public, ALLOCATABLE :: LBndyIndex (:) integer(kind=I4B), public, ALLOCATABLE :: Local_Nptrs (:) integer(kind=I4B), public :: MaxNptrs integer(kind=I4B), public :: MinNptrs type(IntVector_), public, ALLOCATABLE :: NTN (:) type(IntVector_), public, ALLOCATABLE :: NodeToElem (:) integer(kind=I4B), public, ALLOCATABLE :: Nptrs (:) logical(kind=LGT), public :: isInitiated integer(kind=I4B), public :: tNodes Type-Bound Procedures procedure, public, PASS( Obj ) :: Initiate => init_meshdata_1 Constructor for MeshData_ object type, public :: Mesh_ author: Dr Vikas Sharma Read more… Components Type Visibility Attributes Name Initial type(ElementPointer_), public, ALLOCATABLE :: Elem (:) Vector of ElementPointer_ denotes the elements in the mesh integer(kind=I4B), public :: NSD Spatial dimension integer(kind=I4B), public :: maxElements Maximum storage length maxElements= default_factor * tElements integer(kind=I4B), public :: tElements Total elements in the mesh Type-Bound Procedures procedure, public, PASS( Obj ) :: Initiate => allocateMeshSize Constructor for mesh","tags":"","loc":"module/mesh_class.html"},{"title":"Mesh Class – EASIFEM","text":"Note Mesh_Class","tags":"","loc":"page//index.html"}]}